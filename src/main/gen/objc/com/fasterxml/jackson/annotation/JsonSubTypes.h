//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-annotations/src/main/java/com/fasterxml/jackson/annotation/JsonSubTypes.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonSubTypes")
#ifdef RESTRICT_ComFasterxmlJacksonAnnotationJsonSubTypes
#define INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonSubTypes 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonSubTypes 1
#endif
#undef RESTRICT_ComFasterxmlJacksonAnnotationJsonSubTypes

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonAnnotationJsonSubTypes_) && (INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonSubTypes || defined(INCLUDE_ComFasterxmlJacksonAnnotationJsonSubTypes))
#define ComFasterxmlJacksonAnnotationJsonSubTypes_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;
@class IOSObjectArray;

/*!
 @brief Annotation used with <code>JsonTypeInfo</code> to indicate sub-types of serializable
  polymorphic types, and to associate logical names used within JSON content
  (which is more portable than using physical Java class names).
 <p>
  Note that just annotating a property or base type with this annotation does
  NOT enable polymorphic type handling: in addition, <code>JsonTypeInfo</code>
  or equivalent (such as enabling of so-called "default typing") annotation
  is needed, and only in such case is subtype information used.
 */
@protocol ComFasterxmlJacksonAnnotationJsonSubTypes < JavaLangAnnotationAnnotation >

@property (readonly) IOSObjectArray *value;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface ComFasterxmlJacksonAnnotationJsonSubTypes : NSObject < ComFasterxmlJacksonAnnotationJsonSubTypes > {
 @public
  IOSObjectArray *value_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonAnnotationJsonSubTypes)

FOUNDATION_EXPORT id<ComFasterxmlJacksonAnnotationJsonSubTypes> create_ComFasterxmlJacksonAnnotationJsonSubTypes(IOSObjectArray *value);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonAnnotationJsonSubTypes)

#endif

#if !defined (ComFasterxmlJacksonAnnotationJsonSubTypes_Type_) && (INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonSubTypes || defined(INCLUDE_ComFasterxmlJacksonAnnotationJsonSubTypes_Type))
#define ComFasterxmlJacksonAnnotationJsonSubTypes_Type_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

/*!
 @brief Definition of a subtype, along with optional name.If name is missing, class
  of the type will be checked for <code>JsonTypeName</code> annotation; and if that
  is also missing or empty, a default
  name will be constructed by type id mechanism.
 Default name is usually based on class name.
 */
@protocol ComFasterxmlJacksonAnnotationJsonSubTypes_Type < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonAnnotationJsonSubTypes_Type)

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonAnnotationJsonSubTypes_Type)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonSubTypes")
