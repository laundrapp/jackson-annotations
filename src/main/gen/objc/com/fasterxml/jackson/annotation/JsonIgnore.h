//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-annotations/src/main/java/com/fasterxml/jackson/annotation/JsonIgnore.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonIgnore")
#ifdef RESTRICT_ComFasterxmlJacksonAnnotationJsonIgnore
#define INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonIgnore 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonIgnore 1
#endif
#undef RESTRICT_ComFasterxmlJacksonAnnotationJsonIgnore

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonAnnotationJsonIgnore_) && (INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonIgnore || defined(INCLUDE_ComFasterxmlJacksonAnnotationJsonIgnore))
#define ComFasterxmlJacksonAnnotationJsonIgnore_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

/*!
 @brief Marker annotation that indicates that the logical property that
  the accessor (field, getter/setter method or Creator parameter
  [of <code>JsonCreator</code>-annotated constructor or factory method])
  is to be ignored by introspection-based
  serialization and deserialization functionality.
 <p>
  Annotation only needs to be added to one of the accessors (often
  getter method, but may be setter, field or creator parameter),
  if the complete removal of the property is desired.
  However: if only particular accessor is to be ignored (for example,
  when ignoring one of potentially conflicting setter methods),
  this can be done by annotating other not-to-be-ignored accessors
  with <code>JsonProperty</code> (or its equivalents). This is considered
  so-called "split property" case and allows definitions of
  "read-only" (read from input into POJO) and "write-only" (write
  in output but ignore on output)
 <br>
  NOTE! As Jackson 2.6, there is a new and improved way to define
  `read-only` and `write-only` properties, using 
 <code>JsonProperty.access()</code> annotation: this is recommended over
  use of separate <code>JsonIgnore</code> and <code>JsonProperty</code>
  annotations.
 <p>
  For example, a "getter" method that would otherwise denote
  a property (like, say, "getValue" to suggest property "value")
  to serialize, would be ignored and no such property would
  be output unless another annotation defines alternative method to use.
 <p>
  When ignoring the whole property, the default behavior if encountering
  such property in input is to ignore it without exception; but if there
  is a <code>JsonAnySetter</code> it will be called instead. Either way,
  no exception will be thrown.
 <p>
  Annotation is usually used just a like a marker annotation, that
  is, without explicitly defining 'value' argument (which defaults
  to <code>true</code>): but argument can be explicitly defined.
  This can be done to override an existing `JsonIgnore` by explicitly
  defining one with 'false' argument: either in a sub-class, or by
  using "mix-in annotations".
 */
@protocol ComFasterxmlJacksonAnnotationJsonIgnore < JavaLangAnnotationAnnotation >

@property (readonly) jboolean value;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface ComFasterxmlJacksonAnnotationJsonIgnore : NSObject < ComFasterxmlJacksonAnnotationJsonIgnore > {
 @public
  jboolean value_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonAnnotationJsonIgnore)

FOUNDATION_EXPORT id<ComFasterxmlJacksonAnnotationJsonIgnore> create_ComFasterxmlJacksonAnnotationJsonIgnore(jboolean value);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonAnnotationJsonIgnore)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonIgnore")
