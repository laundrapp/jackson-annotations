//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-annotations/src/main/java/com/fasterxml/jackson/annotation/JsonCreator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonCreator")
#ifdef RESTRICT_ComFasterxmlJacksonAnnotationJsonCreator
#define INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonCreator 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonCreator 1
#endif
#undef RESTRICT_ComFasterxmlJacksonAnnotationJsonCreator

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonAnnotationJsonCreator_) && (INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonCreator || defined(INCLUDE_ComFasterxmlJacksonAnnotationJsonCreator))
#define ComFasterxmlJacksonAnnotationJsonCreator_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class ComFasterxmlJacksonAnnotationJsonCreator_Mode;
@class IOSClass;

/*!
 @brief Marker annotation that can be used to define constructors and factory
  methods as one to use for instantiating new instances of the associated
  class.
 <p>
  NOTE: when annotating creator methods (constructors, factory methods),
  method must either be:
 <ul>
  <li>Single-argument constructor/factory method without <code>JsonProperty</code>
     annotation for the argument: if so, this is so-called "delegate creator",
     in which case Jackson first binds JSON into type of the argument, and
     then calls creator. This is often used in conjunction with <code>JsonValue</code>
     (used for serialization).   
 </li>
  <li>Constructor/factory method where <b>every argument</b> is annotated with
    either <code>JsonProperty</code> or <code>JacksonInject</code>, to indicate name
    of property to bind to  
 </li>
  </ul>
  Also note that all <code>JsonProperty</code> annotations must specify actual name
  (NOT empty String for "default") unless you use one of extension modules
  that can detect parameter name; this because default JDK versions before 8
  have not been able to store and/or retrieve parameter names from bytecode.
  But with JDK 8 (or using helper libraries such as Paranamer, or other JVM
  languages like Scala or Kotlin), specifying name is optional.
 <p>
  One common use case is to use a delegating Creator to construct instances from
  scalar values (like <code>java.lang.String</code>) during deserialization,
  and serialize values using <code>JsonValue</code>.
 <p>
  NOTE: As of Jackson 2.6, use of <code>JsonProperty.required()</code> is supported
  for Creator methods (but not necessarily for regular setters or fields!).
 - seealso: JsonCreator
 */
@protocol ComFasterxmlJacksonAnnotationJsonCreator < JavaLangAnnotationAnnotation >

@property (readonly) ComFasterxmlJacksonAnnotationJsonCreator_Mode *mode;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface ComFasterxmlJacksonAnnotationJsonCreator : NSObject < ComFasterxmlJacksonAnnotationJsonCreator > {
 @public
  ComFasterxmlJacksonAnnotationJsonCreator_Mode *mode_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonAnnotationJsonCreator)

FOUNDATION_EXPORT id<ComFasterxmlJacksonAnnotationJsonCreator> create_ComFasterxmlJacksonAnnotationJsonCreator(ComFasterxmlJacksonAnnotationJsonCreator_Mode *mode);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonAnnotationJsonCreator)

#endif

#if !defined (ComFasterxmlJacksonAnnotationJsonCreator_Mode_) && (INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonCreator || defined(INCLUDE_ComFasterxmlJacksonAnnotationJsonCreator_Mode))
#define ComFasterxmlJacksonAnnotationJsonCreator_Mode_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, ComFasterxmlJacksonAnnotationJsonCreator_Mode_Enum) {
  ComFasterxmlJacksonAnnotationJsonCreator_Mode_Enum_DEFAULT = 0,
  ComFasterxmlJacksonAnnotationJsonCreator_Mode_Enum_DELEGATING = 1,
  ComFasterxmlJacksonAnnotationJsonCreator_Mode_Enum_PROPERTIES = 2,
  ComFasterxmlJacksonAnnotationJsonCreator_Mode_Enum_DISABLED = 3,
};

/*!
 @since 2.5
 */
@interface ComFasterxmlJacksonAnnotationJsonCreator_Mode : JavaLangEnum

#pragma mark Public

+ (ComFasterxmlJacksonAnnotationJsonCreator_Mode *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonAnnotationJsonCreator_Mode)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonCreator_Mode *ComFasterxmlJacksonAnnotationJsonCreator_Mode_values_[];

/*!
 @brief Pseudo-mode that indicates that caller is to use default heuristics for
  choosing mode to use.This typically favors use of delegating mode for
  single-argument creators that take structured types.
 */
inline ComFasterxmlJacksonAnnotationJsonCreator_Mode *ComFasterxmlJacksonAnnotationJsonCreator_Mode_get_DEFAULT(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonCreator_Mode, DEFAULT)

/*!
 @brief Mode that indicates that if creator takes a single argument, the whole incoming
  data value is to be bound into declared type of that argument; this "delegate"
  value is then passed as the argument to creator.
 */
inline ComFasterxmlJacksonAnnotationJsonCreator_Mode *ComFasterxmlJacksonAnnotationJsonCreator_Mode_get_DELEGATING(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonCreator_Mode, DELEGATING)

/*!
 @brief Mode that indicates that the argument(s) for creator are to be bound from matching
  properties of incoming Object value, using creator argument names (explicit or implicit)
  to match incoming Object properties to arguments.
 <p>
  Note that this mode is currently (2.5) always used for multiple-argument creators;
  the only ambiguous case is that of a single-argument creator.
 */
inline ComFasterxmlJacksonAnnotationJsonCreator_Mode *ComFasterxmlJacksonAnnotationJsonCreator_Mode_get_PROPERTIES(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonCreator_Mode, PROPERTIES)

/*!
 @brief Pseudo-mode that indicates that creator is not to be used.This can be used as a result
  value for explicit disabling, usually either by custom annotation introspector,
  or by annotation mix-ins (for example when choosing different creator).
 */
inline ComFasterxmlJacksonAnnotationJsonCreator_Mode *ComFasterxmlJacksonAnnotationJsonCreator_Mode_get_DISABLED(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonCreator_Mode, DISABLED)

FOUNDATION_EXPORT IOSObjectArray *ComFasterxmlJacksonAnnotationJsonCreator_Mode_values(void);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonCreator_Mode *ComFasterxmlJacksonAnnotationJsonCreator_Mode_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonCreator_Mode *ComFasterxmlJacksonAnnotationJsonCreator_Mode_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonAnnotationJsonCreator_Mode)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonCreator")
