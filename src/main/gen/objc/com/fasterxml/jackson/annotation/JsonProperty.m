//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-annotations/src/main/java/com/fasterxml/jackson/annotation/JsonProperty.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/annotation/JacksonAnnotation.h"
#include "com/fasterxml/jackson/annotation/JsonProperty.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/annotation/ElementType.h"
#include "java/lang/annotation/Retention.h"
#include "java/lang/annotation/RetentionPolicy.h"
#include "java/lang/annotation/Target.h"

__attribute__((unused)) static IOSObjectArray *ComFasterxmlJacksonAnnotationJsonProperty__Annotations$0(void);

__attribute__((unused)) static void ComFasterxmlJacksonAnnotationJsonProperty_Access_initWithNSString_withInt_(ComFasterxmlJacksonAnnotationJsonProperty_Access *self, NSString *__name, jint __ordinal);

NSString *ComFasterxmlJacksonAnnotationJsonProperty_USE_DEFAULT_NAME = @"";

@implementation ComFasterxmlJacksonAnnotationJsonProperty

@synthesize value = value_;
@synthesize required = required_;
@synthesize index = index_;
@synthesize defaultValue = defaultValue_;
@synthesize access = access_;

+ (NSString *)valueDefault {
  return @"";
}

+ (jboolean)requiredDefault {
  return false;
}

+ (jint)indexDefault {
  return -1;
}

+ (NSString *)defaultValueDefault {
  return @"";
}

+ (ComFasterxmlJacksonAnnotationJsonProperty_Access *)accessDefault {
  return JreLoadEnum(ComFasterxmlJacksonAnnotationJsonProperty_Access, AUTO);
}

- (IOSClass *)annotationType {
  return ComFasterxmlJacksonAnnotationJsonProperty_class_();
}

- (NSString *)description {
  return [NSString stringWithFormat:@"@com.fasterxml.jackson.annotation.JsonProperty(value=%@, required=%d, index=%d, defaultValue=%@, access=%@)", value_, required_, index_, defaultValue_, access_];
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

- (void)dealloc {
  RELEASE_(value_);
  RELEASE_(defaultValue_);
  RELEASE_(access_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonAnnotationJsonProperty_Access;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(value);
  methods[1].selector = @selector(required);
  methods[2].selector = @selector(index);
  methods[3].selector = @selector(defaultValue);
  methods[4].selector = @selector(access);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "USE_DEFAULT_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 0, -1, -1 },
    { "INDEX_UNKNOWN", "I", .constantValue.asInt = ComFasterxmlJacksonAnnotationJsonProperty_INDEX_UNKNOWN, 0x19, -1, -1, -1, -1 },
    { "value_", "LNSString;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "required_", "Z", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "defaultValue_", "LNSString;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "access_", "LComFasterxmlJacksonAnnotationJsonProperty_Access;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { &ComFasterxmlJacksonAnnotationJsonProperty_USE_DEFAULT_NAME, "LComFasterxmlJacksonAnnotationJsonProperty_Access;", (void *)&ComFasterxmlJacksonAnnotationJsonProperty__Annotations$0 };
  static const J2ObjcClassInfo _ComFasterxmlJacksonAnnotationJsonProperty = { "JsonProperty", "com.fasterxml.jackson.annotation", ptrTable, methods, fields, 7, 0x2609, 5, 7, -1, 1, -1, -1, 2 };
  return &_ComFasterxmlJacksonAnnotationJsonProperty;
}

@end

id<ComFasterxmlJacksonAnnotationJsonProperty> create_ComFasterxmlJacksonAnnotationJsonProperty(ComFasterxmlJacksonAnnotationJsonProperty_Access *access, NSString *defaultValue, jint index, jboolean required, NSString *value) {
  ComFasterxmlJacksonAnnotationJsonProperty *self = AUTORELEASE([[ComFasterxmlJacksonAnnotationJsonProperty alloc] init]);
  self->access_ = RETAIN_(access);
  self->defaultValue_ = RETAIN_(defaultValue);
  self->index_ = index;
  self->required_ = required;
  self->value_ = RETAIN_(value);
  return self;
}

IOSObjectArray *ComFasterxmlJacksonAnnotationJsonProperty__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, ANNOTATION_TYPE), JreLoadEnum(JavaLangAnnotationElementType, FIELD), JreLoadEnum(JavaLangAnnotationElementType, METHOD), JreLoadEnum(JavaLangAnnotationElementType, PARAMETER) } count:4 type:JavaLangAnnotationElementType_class_()]), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)), create_ComFasterxmlJacksonAnnotationJacksonAnnotation() } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonAnnotationJsonProperty)

J2OBJC_INITIALIZED_DEFN(ComFasterxmlJacksonAnnotationJsonProperty_Access)

ComFasterxmlJacksonAnnotationJsonProperty_Access *ComFasterxmlJacksonAnnotationJsonProperty_Access_values_[4];

@implementation ComFasterxmlJacksonAnnotationJsonProperty_Access

+ (IOSObjectArray *)values {
  return ComFasterxmlJacksonAnnotationJsonProperty_Access_values();
}

+ (ComFasterxmlJacksonAnnotationJsonProperty_Access *)valueOfWithNSString:(NSString *)name {
  return ComFasterxmlJacksonAnnotationJsonProperty_Access_valueOfWithNSString_(name);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LComFasterxmlJacksonAnnotationJsonProperty_Access;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonAnnotationJsonProperty_Access;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "AUTO", "LComFasterxmlJacksonAnnotationJsonProperty_Access;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "READ_ONLY", "LComFasterxmlJacksonAnnotationJsonProperty_Access;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "WRITE_ONLY", "LComFasterxmlJacksonAnnotationJsonProperty_Access;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "READ_WRITE", "LComFasterxmlJacksonAnnotationJsonProperty_Access;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ComFasterxmlJacksonAnnotationJsonProperty_Access, AUTO), &JreEnum(ComFasterxmlJacksonAnnotationJsonProperty_Access, READ_ONLY), &JreEnum(ComFasterxmlJacksonAnnotationJsonProperty_Access, WRITE_ONLY), &JreEnum(ComFasterxmlJacksonAnnotationJsonProperty_Access, READ_WRITE), "LComFasterxmlJacksonAnnotationJsonProperty;", "Ljava/lang/Enum<Lcom/fasterxml/jackson/annotation/JsonProperty$Access;>;" };
  static const J2ObjcClassInfo _ComFasterxmlJacksonAnnotationJsonProperty_Access = { "Access", "com.fasterxml.jackson.annotation", ptrTable, methods, fields, 7, 0x4019, 2, 4, 6, -1, -1, 7, -1 };
  return &_ComFasterxmlJacksonAnnotationJsonProperty_Access;
}

+ (void)initialize {
  if (self == [ComFasterxmlJacksonAnnotationJsonProperty_Access class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 4; i++) {
      ((void)(ComFasterxmlJacksonAnnotationJsonProperty_Access_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      ComFasterxmlJacksonAnnotationJsonProperty_Access_initWithNSString_withInt_(e, JreEnumConstantName(ComFasterxmlJacksonAnnotationJsonProperty_Access_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(ComFasterxmlJacksonAnnotationJsonProperty_Access)
  }
}

@end

void ComFasterxmlJacksonAnnotationJsonProperty_Access_initWithNSString_withInt_(ComFasterxmlJacksonAnnotationJsonProperty_Access *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *ComFasterxmlJacksonAnnotationJsonProperty_Access_values() {
  ComFasterxmlJacksonAnnotationJsonProperty_Access_initialize();
  return [IOSObjectArray arrayWithObjects:ComFasterxmlJacksonAnnotationJsonProperty_Access_values_ count:4 type:ComFasterxmlJacksonAnnotationJsonProperty_Access_class_()];
}

ComFasterxmlJacksonAnnotationJsonProperty_Access *ComFasterxmlJacksonAnnotationJsonProperty_Access_valueOfWithNSString_(NSString *name) {
  ComFasterxmlJacksonAnnotationJsonProperty_Access_initialize();
  for (int i = 0; i < 4; i++) {
    ComFasterxmlJacksonAnnotationJsonProperty_Access *e = ComFasterxmlJacksonAnnotationJsonProperty_Access_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComFasterxmlJacksonAnnotationJsonProperty_Access *ComFasterxmlJacksonAnnotationJsonProperty_Access_fromOrdinal(NSUInteger ordinal) {
  ComFasterxmlJacksonAnnotationJsonProperty_Access_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return ComFasterxmlJacksonAnnotationJsonProperty_Access_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFasterxmlJacksonAnnotationJsonProperty_Access)
