//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-annotations/src/main/java/com/fasterxml/jackson/annotation/JsonIdentityInfo.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonIdentityInfo")
#ifdef RESTRICT_ComFasterxmlJacksonAnnotationJsonIdentityInfo
#define INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonIdentityInfo 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonIdentityInfo 1
#endif
#undef RESTRICT_ComFasterxmlJacksonAnnotationJsonIdentityInfo

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonAnnotationJsonIdentityInfo_) && (INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonIdentityInfo || defined(INCLUDE_ComFasterxmlJacksonAnnotationJsonIdentityInfo))
#define ComFasterxmlJacksonAnnotationJsonIdentityInfo_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

/*!
 @brief Annotation used for indicating that values of annotated type
  or property should be serializing so that instances either
  contain additional object identifier (in addition actual object
  properties), or as a reference that consists of an object id
  that refers to a full serialization.In practice this is done
  by serializing the first instance as full object and object
  identity, and other references to the object as reference values.
 <p>
  There are two main approaches to generating object identifier:
  either using a generator (either one of standard ones, or a custom
  generator), or using a value of a property. The latter case is
  indicated by using a placeholder generator marker 
 <code>ObjectIdGenerators.PropertyGenerator</code>; former by using explicit generator.
  Object id has to be serialized as a property in case of POJOs;
  object identity is currently NOT support for JSON Array types
  (Java arrays or Lists) or Java Map types.
 <p>
  Finally, note that generator type of <code>ObjectIdGenerators.None</code>
  indicates that no Object Id should be included or used: it is included
  to allow suppressing Object Ids using mix-in annotations.
 @since 2.0
 */
@protocol ComFasterxmlJacksonAnnotationJsonIdentityInfo < JavaLangAnnotationAnnotation >

@property (readonly) NSString *property;
@property (readonly) IOSClass *generator;
@property (readonly) IOSClass *resolver;
@property (readonly) IOSClass *scope;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface ComFasterxmlJacksonAnnotationJsonIdentityInfo : NSObject < ComFasterxmlJacksonAnnotationJsonIdentityInfo > {
 @public
  NSString *property_;
  IOSClass *generator_;
  IOSClass *resolver_;
  IOSClass *scope_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonAnnotationJsonIdentityInfo)

FOUNDATION_EXPORT id<ComFasterxmlJacksonAnnotationJsonIdentityInfo> create_ComFasterxmlJacksonAnnotationJsonIdentityInfo(IOSClass *generator, NSString *property, IOSClass *resolver, IOSClass *scope);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonAnnotationJsonIdentityInfo)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonIdentityInfo")
