//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-annotations/src/main/java/com/fasterxml/jackson/annotation/JsonProperty.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonProperty")
#ifdef RESTRICT_ComFasterxmlJacksonAnnotationJsonProperty
#define INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonProperty 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonProperty 1
#endif
#undef RESTRICT_ComFasterxmlJacksonAnnotationJsonProperty

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonAnnotationJsonProperty_) && (INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonProperty || defined(INCLUDE_ComFasterxmlJacksonAnnotationJsonProperty))
#define ComFasterxmlJacksonAnnotationJsonProperty_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class ComFasterxmlJacksonAnnotationJsonProperty_Access;
@class IOSClass;

/*!
 @brief Marker annotation that can be used to define a non-static
  method as a "setter" or "getter" for a logical property
  (depending on its signature),
  or non-static object field to be used (serialized, deserialized) as
  a logical property.
 <p>
  Default value ("") indicates that the field name is used
  as the property name without any modifications, but it
  can be specified to non-empty value to specify different
  name. Property name refers to name used externally, as
  the field name in JSON objects.
 <p>
  Starting with Jackson 2.6 this annotation may also be
  used to change serialization of <code>Enum</code> like so:
 @code

 public enum MyEnum {
     @@JsonProperty("theFirstValue") THE_FIRST_VALUE,
     @@JsonProperty("another_value") ANOTHER_VALUE;
 }
 
@endcode
  as an alternative to using <code>JsonValue</code> annotation.
 */
@protocol ComFasterxmlJacksonAnnotationJsonProperty < JavaLangAnnotationAnnotation >

@property (readonly) NSString *value;
@property (readonly) jboolean required;
@property (readonly) jint index;
@property (readonly) NSString *defaultValue;
@property (readonly) ComFasterxmlJacksonAnnotationJsonProperty_Access *access;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface ComFasterxmlJacksonAnnotationJsonProperty : NSObject < ComFasterxmlJacksonAnnotationJsonProperty > {
 @public
  NSString *value_;
  jboolean required_;
  jint index_;
  NSString *defaultValue_;
  ComFasterxmlJacksonAnnotationJsonProperty_Access *access_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonAnnotationJsonProperty)

/*!
 @brief Special value that indicates that handlers should use the default
  name (derived from method or field name) for property.
 @since 2.1
 */
inline NSString *ComFasterxmlJacksonAnnotationJsonProperty_get_USE_DEFAULT_NAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComFasterxmlJacksonAnnotationJsonProperty_USE_DEFAULT_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonAnnotationJsonProperty, USE_DEFAULT_NAME, NSString *)

/*!
 @brief Marker value used to indicate that no index has been specified.
 Used as the default value as annotations do not allow "missing"
  values.
 @since 2.4
 */
inline jint ComFasterxmlJacksonAnnotationJsonProperty_get_INDEX_UNKNOWN(void);
#define ComFasterxmlJacksonAnnotationJsonProperty_INDEX_UNKNOWN -1
J2OBJC_STATIC_FIELD_CONSTANT(ComFasterxmlJacksonAnnotationJsonProperty, INDEX_UNKNOWN, jint)

FOUNDATION_EXPORT id<ComFasterxmlJacksonAnnotationJsonProperty> create_ComFasterxmlJacksonAnnotationJsonProperty(ComFasterxmlJacksonAnnotationJsonProperty_Access *access, NSString *defaultValue, jint index, jboolean required, NSString *value);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonAnnotationJsonProperty)

#endif

#if !defined (ComFasterxmlJacksonAnnotationJsonProperty_Access_) && (INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonProperty || defined(INCLUDE_ComFasterxmlJacksonAnnotationJsonProperty_Access))
#define ComFasterxmlJacksonAnnotationJsonProperty_Access_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, ComFasterxmlJacksonAnnotationJsonProperty_Access_Enum) {
  ComFasterxmlJacksonAnnotationJsonProperty_Access_Enum_AUTO = 0,
  ComFasterxmlJacksonAnnotationJsonProperty_Access_Enum_READ_ONLY = 1,
  ComFasterxmlJacksonAnnotationJsonProperty_Access_Enum_WRITE_ONLY = 2,
  ComFasterxmlJacksonAnnotationJsonProperty_Access_Enum_READ_WRITE = 3,
};

/*!
 @brief Various options for <code>access</code> property, specifying how property
  may be accessed during serialization ("read") and deserialization ("write")
  (note that the direction of read and write is from perspective of the property,
  not from external data format: this may be confusing in some contexts).
 <p>
  Note that while this annotation modifies access to annotated property,
  its effects may be further overridden by <code>JsonIgnore</code> property:
  if both annotations are present on an accessors, <code>JsonIgnore</code>
  has precedence over this property.
  This annotation property is, however, preferred over use of "split" 
 <code>JsonIgnore</code>/<code>JsonProperty</code> combination.
 @since 2.6
 */
@interface ComFasterxmlJacksonAnnotationJsonProperty_Access : JavaLangEnum

#pragma mark Public

+ (ComFasterxmlJacksonAnnotationJsonProperty_Access *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonAnnotationJsonProperty_Access)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonProperty_Access *ComFasterxmlJacksonAnnotationJsonProperty_Access_values_[];

/*!
 @brief Access setting which means that visibility rules are to be used
  to automatically determine read- and/or write-access of this property.
 */
inline ComFasterxmlJacksonAnnotationJsonProperty_Access *ComFasterxmlJacksonAnnotationJsonProperty_Access_get_AUTO(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonProperty_Access, AUTO)

/*!
 @brief Access setting that means that the property may only be read for serialization,
  but not written (set) during deserialization.
 */
inline ComFasterxmlJacksonAnnotationJsonProperty_Access *ComFasterxmlJacksonAnnotationJsonProperty_Access_get_READ_ONLY(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonProperty_Access, READ_ONLY)

/*!
 @brief Access setting that means that the property may only be written (set)
  for deserialization,
  but will not be read (get) on serialization, that is, the value of the property
  is not included in serialization.
 */
inline ComFasterxmlJacksonAnnotationJsonProperty_Access *ComFasterxmlJacksonAnnotationJsonProperty_Access_get_WRITE_ONLY(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonProperty_Access, WRITE_ONLY)

/*!
 @brief Access setting that means that the property will be accessed for both
  serialization (writing out values as external representation)
  and deserialization (reading values from external representation),
  regardless of visibility rules.
 */
inline ComFasterxmlJacksonAnnotationJsonProperty_Access *ComFasterxmlJacksonAnnotationJsonProperty_Access_get_READ_WRITE(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonProperty_Access, READ_WRITE)

FOUNDATION_EXPORT IOSObjectArray *ComFasterxmlJacksonAnnotationJsonProperty_Access_values(void);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonProperty_Access *ComFasterxmlJacksonAnnotationJsonProperty_Access_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonProperty_Access *ComFasterxmlJacksonAnnotationJsonProperty_Access_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonAnnotationJsonProperty_Access)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonProperty")
