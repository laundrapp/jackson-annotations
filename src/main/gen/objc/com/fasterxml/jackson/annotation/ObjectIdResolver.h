//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-annotations/src/main/java/com/fasterxml/jackson/annotation/ObjectIdResolver.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonAnnotationObjectIdResolver")
#ifdef RESTRICT_ComFasterxmlJacksonAnnotationObjectIdResolver
#define INCLUDE_ALL_ComFasterxmlJacksonAnnotationObjectIdResolver 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonAnnotationObjectIdResolver 1
#endif
#undef RESTRICT_ComFasterxmlJacksonAnnotationObjectIdResolver

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonAnnotationObjectIdResolver_) && (INCLUDE_ALL_ComFasterxmlJacksonAnnotationObjectIdResolver || defined(INCLUDE_ComFasterxmlJacksonAnnotationObjectIdResolver))
#define ComFasterxmlJacksonAnnotationObjectIdResolver_

@class ComFasterxmlJacksonAnnotationObjectIdGenerator_IdKey;

/*!
 @brief Definition of API used for resolving actual Java object from
  Object Identifiers (as annotated using <code>JsonIdentityInfo</code>).
 @since 2.4
 */
@protocol ComFasterxmlJacksonAnnotationObjectIdResolver < JavaObject >

/*!
 @brief Method called when a POJO is deserialized and has an Object Identifier.
 Method exists so that implementation can keep track of existing object in
  JSON stream that could be useful for further resolution.
 @param id_ The Object Identifer
 @param pojo The POJO associated to that Identifier
 */
- (void)bindItemWithComFasterxmlJacksonAnnotationObjectIdGenerator_IdKey:(ComFasterxmlJacksonAnnotationObjectIdGenerator_IdKey *)id_
                                                                  withId:(id)pojo;

/*!
 @brief Method called when deserialization encounters the given Object Identifier
  and requires the POJO associated with it.
 @param id_ The Object Identifier
 @return The POJO, or null if unable to resolve.
 */
- (id)resolveIdWithComFasterxmlJacksonAnnotationObjectIdGenerator_IdKey:(ComFasterxmlJacksonAnnotationObjectIdGenerator_IdKey *)id_;

/*!
 @brief Factory method called to create a new instance to use for
  deserialization: needed since resolvers may have state (a pool of
  objects).
 <p>
  Note that actual type of 'context' is 
 <code>com.fasterxml.jackson.databind.DeserializationContext</code>, but
  can not be declared here as type itself (as well as call to this object)
  comes from databind package.
 @param context Deserialization context object used (of type
               <code>
  com.fasterxml.jackson.databind.DeserializationContext </code>             ; may be needed by more complex resolvers to access contextual
              information such as configuration.
 */
- (id<ComFasterxmlJacksonAnnotationObjectIdResolver>)newForDeserializationWithId:(id)context OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Method called to check whether this resolver instance can be used for
  Object Ids of specific resolver type; determination is based by passing a
  configured "blueprint" (prototype) instance; from which the actual
  instances are created (using <code>newForDeserialization</code>).
 @return True if this instance can be used as-is; false if not
 */
- (jboolean)canUseForWithComFasterxmlJacksonAnnotationObjectIdResolver:(id<ComFasterxmlJacksonAnnotationObjectIdResolver>)resolverType;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonAnnotationObjectIdResolver)

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonAnnotationObjectIdResolver)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonAnnotationObjectIdResolver")
