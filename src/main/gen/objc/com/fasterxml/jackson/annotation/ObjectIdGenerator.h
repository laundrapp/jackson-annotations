//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-annotations/src/main/java/com/fasterxml/jackson/annotation/ObjectIdGenerator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonAnnotationObjectIdGenerator")
#ifdef RESTRICT_ComFasterxmlJacksonAnnotationObjectIdGenerator
#define INCLUDE_ALL_ComFasterxmlJacksonAnnotationObjectIdGenerator 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonAnnotationObjectIdGenerator 1
#endif
#undef RESTRICT_ComFasterxmlJacksonAnnotationObjectIdGenerator

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonAnnotationObjectIdGenerator_) && (INCLUDE_ALL_ComFasterxmlJacksonAnnotationObjectIdGenerator || defined(INCLUDE_ComFasterxmlJacksonAnnotationObjectIdGenerator))
#define ComFasterxmlJacksonAnnotationObjectIdGenerator_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonAnnotationObjectIdGenerator_IdKey;
@class IOSClass;

/*!
 @brief Definition of API used for constructing Object Identifiers
  (as annotated using <code>JsonIdentityInfo</code>).
 Also defines factory methods used for creating instances
  for serialization, deserialization.
 */
@interface ComFasterxmlJacksonAnnotationObjectIdGenerator : NSObject < JavaIoSerializable >

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Method called to check whether this generator instance can
  be used for Object Ids of specific generator type and
  scope; determination is based by passing a configured
  "blueprint" (prototype) instance; from which the actual
  instances are created (using <code>newForSerialization</code>).
 @return True if this instance can be used as-is; false if not
 */
- (jboolean)canUseForWithComFasterxmlJacksonAnnotationObjectIdGenerator:(ComFasterxmlJacksonAnnotationObjectIdGenerator *)gen;

/*!
 @brief Factory method to create a blueprint instance for specified
  scope.Generators that do not use scope may return 'this'.
 */
- (ComFasterxmlJacksonAnnotationObjectIdGenerator *)forScopeWithIOSClass:(IOSClass *)scope;

/*!
 @brief Method used for generating a new Object Identifier to serialize
  for given POJO.
 @param forPojo POJO for which identifier is needed
 @return Object Identifier to use.
 */
- (id)generateIdWithId:(id)forPojo;

- (IOSClass *)getScope;

/*!
 @brief Accessor that may be called (after verifying (via <code>maySerializeAsObject()</code>)
  whether given name
 @param name Name of property to check
 @param parser Parser that points to property name, in case generator needs     further verification (note: untyped, because 
  <code> JsonParser </code>  is defined     in `jackson-core`, and this package does not depend on it).
 @since 2.5
 */
- (jboolean)isValidReferencePropertyNameWithNSString:(NSString *)name
                                              withId:(id)parser;

/*!
 @brief Method for constructing key to use for ObjectId-to-POJO maps.
 */
- (ComFasterxmlJacksonAnnotationObjectIdGenerator_IdKey *)keyWithId:(id)key;

/*!
 @brief Accessor that needs to be overridden to return <code>true</code>
  if the Object Id may be serialized as JSON Object; used by, for example,
  JSOG handling.
 The reason accessor is needed is because handling such Object Ids is
  more complex and may incur additional buffering or performance overhead,
  avoiding of which makes sense for common case of scalar object ids
  (or native object ids some formats support).
 <p>
  Default implementation returns <code>false</code>, so needs to be overridden
  by Object-producing generators.
 @since 2.5
 */
- (jboolean)maySerializeAsObject;

/*!
 @brief Factory method called to create a new instance to use for
  serialization: needed since generators may have state
  (next id to produce).
 <p>
  Note that actual type of 'context' is 
 <code>com.fasterxml.jackson.databind.SerializerProvider</code>,
  but can not be declared here as type itself (as well as call
  to this object) comes from databind package.
 @param context Serialization context object used (of type     
  <code> com.fasterxml.jackson.databind.SerializerProvider </code> ;     may be needed by more complex generators to access contextual
      information such as configuration.
 */
- (ComFasterxmlJacksonAnnotationObjectIdGenerator *)newForSerializationWithId:(id)context OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonAnnotationObjectIdGenerator)

FOUNDATION_EXPORT void ComFasterxmlJacksonAnnotationObjectIdGenerator_init(ComFasterxmlJacksonAnnotationObjectIdGenerator *self);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonAnnotationObjectIdGenerator)

#endif

#if !defined (ComFasterxmlJacksonAnnotationObjectIdGenerator_IdKey_) && (INCLUDE_ALL_ComFasterxmlJacksonAnnotationObjectIdGenerator || defined(INCLUDE_ComFasterxmlJacksonAnnotationObjectIdGenerator_IdKey))
#define ComFasterxmlJacksonAnnotationObjectIdGenerator_IdKey_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSClass;

/*!
 @brief Simple key class that can be used as a key for
  ObjectId-to-POJO mappings, when multiple ObjectId types
  and scopes are used.
 */
@interface ComFasterxmlJacksonAnnotationObjectIdGenerator_IdKey : NSObject < JavaIoSerializable > {
 @public
  /*!
   @brief Type of <code>ObjectIdGenerator</code> used for generating Object Id
   */
  IOSClass *type_;
  /*!
   @brief Scope of the Object Id (may be null, to denote global)
   */
  IOSClass *scope_;
  /*!
   @brief Object for which Object Id was generated: can NOT be null.
   */
  id key_;
}

#pragma mark Public

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)type
                              withIOSClass:(IOSClass *)scope
                                    withId:(id)key;

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonAnnotationObjectIdGenerator_IdKey)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonAnnotationObjectIdGenerator_IdKey, type_, IOSClass *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonAnnotationObjectIdGenerator_IdKey, scope_, IOSClass *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonAnnotationObjectIdGenerator_IdKey, key_, id)

FOUNDATION_EXPORT void ComFasterxmlJacksonAnnotationObjectIdGenerator_IdKey_initWithIOSClass_withIOSClass_withId_(ComFasterxmlJacksonAnnotationObjectIdGenerator_IdKey *self, IOSClass *type, IOSClass *scope, id key);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationObjectIdGenerator_IdKey *new_ComFasterxmlJacksonAnnotationObjectIdGenerator_IdKey_initWithIOSClass_withIOSClass_withId_(IOSClass *type, IOSClass *scope, id key) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationObjectIdGenerator_IdKey *create_ComFasterxmlJacksonAnnotationObjectIdGenerator_IdKey_initWithIOSClass_withIOSClass_withId_(IOSClass *type, IOSClass *scope, id key);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonAnnotationObjectIdGenerator_IdKey)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonAnnotationObjectIdGenerator")
