//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-annotations/src/main/java/com/fasterxml/jackson/annotation/JsonUnwrapped.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonUnwrapped")
#ifdef RESTRICT_ComFasterxmlJacksonAnnotationJsonUnwrapped
#define INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonUnwrapped 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonUnwrapped 1
#endif
#undef RESTRICT_ComFasterxmlJacksonAnnotationJsonUnwrapped

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonAnnotationJsonUnwrapped_) && (INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonUnwrapped || defined(INCLUDE_ComFasterxmlJacksonAnnotationJsonUnwrapped))
#define ComFasterxmlJacksonAnnotationJsonUnwrapped_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

/*!
 @brief Annotation used to indicate that a property should be serialized
  "unwrapped"; that is, if it would be serialized as JSON Object, its
  properties are instead included as properties of its containing
  Object.For example, consider case of POJO like: 
 @code

   public class Parent {
     public int age;
     public Name name;
   }
   public class Name {
     public String first, last;
   }
 
@endcode  
  which would normally be serialized as follows (assuming @@JsonUnwrapped
  had no effect):
 @code

   {
     "age" : 18,
     "name" : {
       "first" : "Joey",
       "last" : "Sixpack"
     }   }
 
@endcode
  can be changed to this:
 @code

   {
     "age" : 18,
     "first" : "Joey",
     "last" : "Sixpack"
   }
 
@endcode
  by changing Parent class to:
 @code

   public class Parent {
     public int age;    
    &#064;JsonUnwrapped
     public Name name;
   }
 
@endcode
  Annotation can only be added to properties, and not classes, as it is contextual.
 <p>
  Also note that annotation only applies if
 <ul>
  <li>Value is serialized as JSON Object (can not unwrap JSON arrays using this
    mechanism)   
 </li>
  <li>Serialization is done using <code>BeanSerializer</code>, not a custom serializer
    </li>
  <li>No type information is added; if type information needs to be added, structure can
    not be altered regardless of inclusion strategy; so annotation is basically ignored.   
 </li>
  </ul>
 */
@protocol ComFasterxmlJacksonAnnotationJsonUnwrapped < JavaLangAnnotationAnnotation >

@property (readonly) jboolean enabled;
@property (readonly) NSString *prefix;
@property (readonly) NSString *suffix;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface ComFasterxmlJacksonAnnotationJsonUnwrapped : NSObject < ComFasterxmlJacksonAnnotationJsonUnwrapped > {
 @public
  jboolean enabled_;
  NSString *prefix_;
  NSString *suffix_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonAnnotationJsonUnwrapped)

FOUNDATION_EXPORT id<ComFasterxmlJacksonAnnotationJsonUnwrapped> create_ComFasterxmlJacksonAnnotationJsonUnwrapped(jboolean enabled, NSString *prefix, NSString *suffix);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonAnnotationJsonUnwrapped)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonUnwrapped")
