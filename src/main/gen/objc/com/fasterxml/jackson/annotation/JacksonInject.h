//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-annotations/src/main/java/com/fasterxml/jackson/annotation/JacksonInject.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonAnnotationJacksonInject")
#ifdef RESTRICT_ComFasterxmlJacksonAnnotationJacksonInject
#define INCLUDE_ALL_ComFasterxmlJacksonAnnotationJacksonInject 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonAnnotationJacksonInject 1
#endif
#undef RESTRICT_ComFasterxmlJacksonAnnotationJacksonInject

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonAnnotationJacksonInject_) && (INCLUDE_ALL_ComFasterxmlJacksonAnnotationJacksonInject || defined(INCLUDE_ComFasterxmlJacksonAnnotationJacksonInject))
#define ComFasterxmlJacksonAnnotationJacksonInject_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class ComFasterxmlJacksonAnnotationOptBoolean;
@class IOSClass;

/*!
 @brief Jackson-specific annotation used for indicating that value of
  annotated property will be "injected", i.e.set based on value
  configured by <code>ObjectMapper</code> (usually on per-call basis).
 Usually property is not deserialized from JSON, although it possible
  to have injected value as default and still allow optional override
  from JSON.
 */
@protocol ComFasterxmlJacksonAnnotationJacksonInject < JavaLangAnnotationAnnotation >

@property (readonly) NSString *value;
@property (readonly) ComFasterxmlJacksonAnnotationOptBoolean *useInput;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface ComFasterxmlJacksonAnnotationJacksonInject : NSObject < ComFasterxmlJacksonAnnotationJacksonInject > {
 @public
  NSString *value_;
  ComFasterxmlJacksonAnnotationOptBoolean *useInput_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonAnnotationJacksonInject)

FOUNDATION_EXPORT id<ComFasterxmlJacksonAnnotationJacksonInject> create_ComFasterxmlJacksonAnnotationJacksonInject(ComFasterxmlJacksonAnnotationOptBoolean *useInput, NSString *value);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonAnnotationJacksonInject)

#endif

#if !defined (ComFasterxmlJacksonAnnotationJacksonInject_Value_) && (INCLUDE_ALL_ComFasterxmlJacksonAnnotationJacksonInject || defined(INCLUDE_ComFasterxmlJacksonAnnotationJacksonInject_Value))
#define ComFasterxmlJacksonAnnotationJacksonInject_Value_

#define RESTRICT_ComFasterxmlJacksonAnnotationJacksonAnnotationValue 1
#define INCLUDE_ComFasterxmlJacksonAnnotationJacksonAnnotationValue 1
#include "com/fasterxml/jackson/annotation/JacksonAnnotationValue.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSClass;
@class JavaLangBoolean;
@protocol ComFasterxmlJacksonAnnotationJacksonInject;

/*!
 @brief Helper class used to contain information from a single <code>JacksonInject</code>
  annotation, as well as to provide possible overrides from non-annotation sources.
 @since 2.9
 */
@interface ComFasterxmlJacksonAnnotationJacksonInject_Value : NSObject < ComFasterxmlJacksonAnnotationJacksonAnnotationValue, JavaIoSerializable > {
 @public
  /*!
   @brief Id to use to access injected value; if `null`, "default" name, derived
  from accessor will be used.
   */
  id _id_;
  JavaLangBoolean *_useInput_;
}

#pragma mark Public

+ (ComFasterxmlJacksonAnnotationJacksonInject_Value *)constructWithId:(id)id_
                                                  withJavaLangBoolean:(JavaLangBoolean *)useInput;

+ (ComFasterxmlJacksonAnnotationJacksonInject_Value *)empty;

- (jboolean)isEqual:(id)o;

+ (ComFasterxmlJacksonAnnotationJacksonInject_Value *)forIdWithId:(id)id_;

+ (ComFasterxmlJacksonAnnotationJacksonInject_Value *)fromWithComFasterxmlJacksonAnnotationJacksonInject:(id<ComFasterxmlJacksonAnnotationJacksonInject>)src;

- (id)getId;

- (JavaLangBoolean *)getUseInput;

- (NSUInteger)hash;

- (jboolean)hasId;

- (NSString *)description;

- (IOSClass *)valueFor;

- (jboolean)willUseInputWithBoolean:(jboolean)defaultSetting;

- (ComFasterxmlJacksonAnnotationJacksonInject_Value *)withIdWithId:(id)id_;

- (ComFasterxmlJacksonAnnotationJacksonInject_Value *)withUseInputWithJavaLangBoolean:(JavaLangBoolean *)useInput;

#pragma mark Protected

- (instancetype __nonnull)initWithId:(id)id_
                 withJavaLangBoolean:(JavaLangBoolean *)useInput;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonAnnotationJacksonInject_Value)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonAnnotationJacksonInject_Value, _id_, id)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonAnnotationJacksonInject_Value, _useInput_, JavaLangBoolean *)

inline ComFasterxmlJacksonAnnotationJacksonInject_Value *ComFasterxmlJacksonAnnotationJacksonInject_Value_get_EMPTY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJacksonInject_Value *ComFasterxmlJacksonAnnotationJacksonInject_Value_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonAnnotationJacksonInject_Value, EMPTY, ComFasterxmlJacksonAnnotationJacksonInject_Value *)

FOUNDATION_EXPORT void ComFasterxmlJacksonAnnotationJacksonInject_Value_initWithId_withJavaLangBoolean_(ComFasterxmlJacksonAnnotationJacksonInject_Value *self, id id_, JavaLangBoolean *useInput);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJacksonInject_Value *new_ComFasterxmlJacksonAnnotationJacksonInject_Value_initWithId_withJavaLangBoolean_(id id_, JavaLangBoolean *useInput) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJacksonInject_Value *create_ComFasterxmlJacksonAnnotationJacksonInject_Value_initWithId_withJavaLangBoolean_(id id_, JavaLangBoolean *useInput);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJacksonInject_Value *ComFasterxmlJacksonAnnotationJacksonInject_Value_empty(void);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJacksonInject_Value *ComFasterxmlJacksonAnnotationJacksonInject_Value_constructWithId_withJavaLangBoolean_(id id_, JavaLangBoolean *useInput);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJacksonInject_Value *ComFasterxmlJacksonAnnotationJacksonInject_Value_fromWithComFasterxmlJacksonAnnotationJacksonInject_(id<ComFasterxmlJacksonAnnotationJacksonInject> src);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJacksonInject_Value *ComFasterxmlJacksonAnnotationJacksonInject_Value_forIdWithId_(id id_);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonAnnotationJacksonInject_Value)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonAnnotationJacksonInject")
