//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-annotations/src/main/java/com/fasterxml/jackson/annotation/JsonFormat.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonFormat")
#ifdef RESTRICT_ComFasterxmlJacksonAnnotationJsonFormat
#define INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonFormat 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonFormat 1
#endif
#undef RESTRICT_ComFasterxmlJacksonAnnotationJsonFormat

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonAnnotationJsonFormat_) && (INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonFormat || defined(INCLUDE_ComFasterxmlJacksonAnnotationJsonFormat))
#define ComFasterxmlJacksonAnnotationJsonFormat_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class ComFasterxmlJacksonAnnotationJsonFormat_Shape;
@class ComFasterxmlJacksonAnnotationOptBoolean;
@class IOSClass;
@class IOSObjectArray;

/*!
 @brief General-purpose annotation used for configuring details of how
  values of properties are to be serialized.
 Unlike most other Jackson annotations, annotation does not
  have specific universal interpretation: instead, effect depends on datatype
  of property being annotated (or more specifically, deserializer
  and serializer being used).
 <p>
  Common uses include choosing between alternate representations -- for example,
  whether <code>java.util.Date</code> is to be serialized as number (Java timestamp)
  or String (such as ISO-8601 compatible time value) -- as well as configuring
  exact details with <code>pattern</code> property.
 <p>
  As of Jackson 2.6, known special handling includes:
 <ul>
  <li><code>java.util.Date</code>: Shape can  be <code>Shape.STRING</code> or <code>Shape.NUMBER</code>;
     pattern may contain <code>java.text.SimpleDateFormat</code>-compatible pattern definition.
    </li>
  <li>Can be used on Classes (types) as well, for modified default behavior, possibly
    overridden by per-property annotation   
 </li>
  <li><code>java.lang.Enum</code>s: Shapes <code>Shape.STRING</code> and <code>Shape.NUMBER</code> can be
     used to change between numeric (index) and textual (name or <code>toString()</code>);
     but it is also possible to use <code>Shape.OBJECT</code> to serialize (but not deserialize)
     <code>java.lang.Enum</code>s as JSON Objects (as if they were POJOs). NOTE: serialization
      as JSON Object only works with class annotation; 
     will not work as per-property annotation.   
 </li>
  <li><code>java.util.Collection</code>s can be serialized as (and deserialized from) JSON Objects,
     if <code>Shape.OBJECT</code> is used. NOTE: can ONLY be used as class annotation;
     will not work as per-property annotation.   
 </li>
  <li><code>java.lang.Number</code> subclasses can be serialized as full objects if
     <code>Shape.OBJECT</code> is used. Otherwise the default behavior of serializing to a
     scalar number value will be preferred. NOTE: can ONLY be used as class annotation;
     will not work as per-property annotation.   
 </li>
 </ul>
 @since 2.0
 */
@protocol ComFasterxmlJacksonAnnotationJsonFormat < JavaLangAnnotationAnnotation >

@property (readonly) NSString *pattern;
@property (readonly) ComFasterxmlJacksonAnnotationJsonFormat_Shape *shape;
@property (readonly) NSString *locale;
@property (readonly) NSString *timezone;
@property (readonly) ComFasterxmlJacksonAnnotationOptBoolean *lenient;
@property (readonly) IOSObjectArray *with;
@property (readonly) IOSObjectArray *without;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface ComFasterxmlJacksonAnnotationJsonFormat : NSObject < ComFasterxmlJacksonAnnotationJsonFormat > {
 @public
  NSString *pattern_;
  ComFasterxmlJacksonAnnotationJsonFormat_Shape *shape_;
  NSString *locale_;
  NSString *timezone_;
  ComFasterxmlJacksonAnnotationOptBoolean *lenient_;
  IOSObjectArray *with_;
  IOSObjectArray *without_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonAnnotationJsonFormat)

/*!
 @brief Value that indicates that default <code>java.util.Locale</code>
  (from deserialization or serialization context) should be used:
  annotation does not define value to use.
 */
inline NSString *ComFasterxmlJacksonAnnotationJsonFormat_get_DEFAULT_LOCALE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComFasterxmlJacksonAnnotationJsonFormat_DEFAULT_LOCALE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonAnnotationJsonFormat, DEFAULT_LOCALE, NSString *)

/*!
 @brief Value that indicates that default <code>java.util.TimeZone</code>
  (from deserialization or serialization context) should be used:
  annotation does not define value to use.
 <p>
  NOTE: default here does NOT mean JVM defaults but Jackson databindings
  default, usually UTC, but may be changed on <code>ObjectMapper</code>.
 */
inline NSString *ComFasterxmlJacksonAnnotationJsonFormat_get_DEFAULT_TIMEZONE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComFasterxmlJacksonAnnotationJsonFormat_DEFAULT_TIMEZONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonAnnotationJsonFormat, DEFAULT_TIMEZONE, NSString *)

FOUNDATION_EXPORT id<ComFasterxmlJacksonAnnotationJsonFormat> create_ComFasterxmlJacksonAnnotationJsonFormat(ComFasterxmlJacksonAnnotationOptBoolean *lenient, NSString *locale, NSString *pattern, ComFasterxmlJacksonAnnotationJsonFormat_Shape *shape, NSString *timezone, IOSObjectArray *with, IOSObjectArray *without);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonAnnotationJsonFormat)

#endif

#if !defined (ComFasterxmlJacksonAnnotationJsonFormat_Shape_) && (INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonFormat || defined(INCLUDE_ComFasterxmlJacksonAnnotationJsonFormat_Shape))
#define ComFasterxmlJacksonAnnotationJsonFormat_Shape_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, ComFasterxmlJacksonAnnotationJsonFormat_Shape_Enum) {
  ComFasterxmlJacksonAnnotationJsonFormat_Shape_Enum_ANY = 0,
  ComFasterxmlJacksonAnnotationJsonFormat_Shape_Enum_NATURAL = 1,
  ComFasterxmlJacksonAnnotationJsonFormat_Shape_Enum_SCALAR = 2,
  ComFasterxmlJacksonAnnotationJsonFormat_Shape_Enum_ARRAY = 3,
  ComFasterxmlJacksonAnnotationJsonFormat_Shape_Enum_OBJECT = 4,
  ComFasterxmlJacksonAnnotationJsonFormat_Shape_Enum_NUMBER = 5,
  ComFasterxmlJacksonAnnotationJsonFormat_Shape_Enum_NUMBER_FLOAT = 6,
  ComFasterxmlJacksonAnnotationJsonFormat_Shape_Enum_NUMBER_INT = 7,
  ComFasterxmlJacksonAnnotationJsonFormat_Shape_Enum_STRING = 8,
  ComFasterxmlJacksonAnnotationJsonFormat_Shape_Enum_BOOLEAN = 9,
};

/*!
 @brief Value enumeration used for indicating preferred Shape; translates
  loosely to JSON types, with some extra values to indicate less precise
  choices (i.e.allowing one of multiple actual shapes)
 */
@interface ComFasterxmlJacksonAnnotationJsonFormat_Shape : JavaLangEnum

#pragma mark Public

- (jboolean)isNumeric;

- (jboolean)isStructured;

+ (ComFasterxmlJacksonAnnotationJsonFormat_Shape *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonAnnotationJsonFormat_Shape)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Shape *ComFasterxmlJacksonAnnotationJsonFormat_Shape_values_[];

/*!
 @brief Marker enum value that indicates "whatever" choice, meaning that annotation
  does NOT specify shape to use.
 Note that this is different from <code>Shape.NATURAL</code>, which
  specifically instructs use of the "natural" shape for datatype.
 */
inline ComFasterxmlJacksonAnnotationJsonFormat_Shape *ComFasterxmlJacksonAnnotationJsonFormat_Shape_get_ANY(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonFormat_Shape, ANY)

/*!
 @brief Marker enum value that indicates the "default" choice for given datatype;
  for example, JSON String for <code>java.lang.String</code>, or JSON Number
  for Java numbers.
 Note that this is different from <code>Shape.ANY</code> in that this is actual
  explicit choice that overrides possible default settings.
 @since 2.8
 */
inline ComFasterxmlJacksonAnnotationJsonFormat_Shape *ComFasterxmlJacksonAnnotationJsonFormat_Shape_get_NATURAL(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonFormat_Shape, NATURAL)

/*!
 @brief Value that indicates shape should not be structural (that is, not 
 <code>ARRAY</code> or <code>OBJECT</code>, but can be any other shape.
 */
inline ComFasterxmlJacksonAnnotationJsonFormat_Shape *ComFasterxmlJacksonAnnotationJsonFormat_Shape_get_SCALAR(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonFormat_Shape, SCALAR)

/*!
 @brief Value that indicates that (JSON) Array type should be used.
 */
inline ComFasterxmlJacksonAnnotationJsonFormat_Shape *ComFasterxmlJacksonAnnotationJsonFormat_Shape_get_ARRAY(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonFormat_Shape, ARRAY)

/*!
 @brief Value that indicates that (JSON) Object type should be used.
 */
inline ComFasterxmlJacksonAnnotationJsonFormat_Shape *ComFasterxmlJacksonAnnotationJsonFormat_Shape_get_OBJECT(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonFormat_Shape, OBJECT)

/*!
 @brief Value that indicates that a numeric (JSON) type should be used
  (but does not specify whether integer or floating-point representation
  should be used)
 */
inline ComFasterxmlJacksonAnnotationJsonFormat_Shape *ComFasterxmlJacksonAnnotationJsonFormat_Shape_get_NUMBER(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonFormat_Shape, NUMBER)

/*!
 @brief Value that indicates that floating-point numeric type should be used
 */
inline ComFasterxmlJacksonAnnotationJsonFormat_Shape *ComFasterxmlJacksonAnnotationJsonFormat_Shape_get_NUMBER_FLOAT(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonFormat_Shape, NUMBER_FLOAT)

/*!
 @brief Value that indicates that integer number type should be used
  (and not <code>NUMBER_FLOAT</code>).
 */
inline ComFasterxmlJacksonAnnotationJsonFormat_Shape *ComFasterxmlJacksonAnnotationJsonFormat_Shape_get_NUMBER_INT(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonFormat_Shape, NUMBER_INT)

/*!
 @brief Value that indicates that (JSON) String type should be used.
 */
inline ComFasterxmlJacksonAnnotationJsonFormat_Shape *ComFasterxmlJacksonAnnotationJsonFormat_Shape_get_STRING(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonFormat_Shape, STRING)

/*!
 @brief Value that indicates that (JSON) boolean type
  (true, false) should be used.
 */
inline ComFasterxmlJacksonAnnotationJsonFormat_Shape *ComFasterxmlJacksonAnnotationJsonFormat_Shape_get_BOOLEAN(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonFormat_Shape, BOOLEAN)

FOUNDATION_EXPORT IOSObjectArray *ComFasterxmlJacksonAnnotationJsonFormat_Shape_values(void);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Shape *ComFasterxmlJacksonAnnotationJsonFormat_Shape_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Shape *ComFasterxmlJacksonAnnotationJsonFormat_Shape_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonAnnotationJsonFormat_Shape)

#endif

#if !defined (ComFasterxmlJacksonAnnotationJsonFormat_Feature_) && (INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonFormat || defined(INCLUDE_ComFasterxmlJacksonAnnotationJsonFormat_Feature))
#define ComFasterxmlJacksonAnnotationJsonFormat_Feature_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, ComFasterxmlJacksonAnnotationJsonFormat_Feature_Enum) {
  ComFasterxmlJacksonAnnotationJsonFormat_Feature_Enum_ACCEPT_SINGLE_VALUE_AS_ARRAY = 0,
  ComFasterxmlJacksonAnnotationJsonFormat_Feature_Enum_ACCEPT_CASE_INSENSITIVE_PROPERTIES = 1,
  ComFasterxmlJacksonAnnotationJsonFormat_Feature_Enum_WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS = 2,
  ComFasterxmlJacksonAnnotationJsonFormat_Feature_Enum_WRITE_DATES_WITH_ZONE_ID = 3,
  ComFasterxmlJacksonAnnotationJsonFormat_Feature_Enum_WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED = 4,
  ComFasterxmlJacksonAnnotationJsonFormat_Feature_Enum_WRITE_SORTED_MAP_ENTRIES = 5,
  ComFasterxmlJacksonAnnotationJsonFormat_Feature_Enum_ADJUST_DATES_TO_CONTEXT_TIME_ZONE = 6,
};

/*!
 @brief Set of features that can be enabled/disabled for property annotated.
 These often relate to specific <code>SerializationFeature</code>
  or <code>DeserializationFeature</code>, as noted by entries.
 <p>
  Note that whether specific setting has an effect depends on whether 
 <code>JsonSerializer</code> / <code>JsonDeserializer</code> being used
  takes the format setting into account. If not, please file an issue
  for adding support via issue tracker for package that has handlers
  (if you know which one; if not, just use `jackson-databind`).
 @since 2.6
 */
@interface ComFasterxmlJacksonAnnotationJsonFormat_Feature : JavaLangEnum

#pragma mark Public

+ (ComFasterxmlJacksonAnnotationJsonFormat_Feature *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonAnnotationJsonFormat_Feature)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Feature *ComFasterxmlJacksonAnnotationJsonFormat_Feature_values_[];

/*!
 @brief Override for <code>DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY</code>
  which will allow deserialization of JSON non-array values into single-element
  Java arrays and <code>java.util.Collection</code>s.
 */
inline ComFasterxmlJacksonAnnotationJsonFormat_Feature *ComFasterxmlJacksonAnnotationJsonFormat_Feature_get_ACCEPT_SINGLE_VALUE_AS_ARRAY(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonFormat_Feature, ACCEPT_SINGLE_VALUE_AS_ARRAY)

/*!
 @brief Override for <code>MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES</code>.
 Only affects deserialization, has no effect on serialization.
 <p>
  NOTE: starting with 2.9 can also effect Enum handling (and potentially other
  places where case-insensitive property values are accepted).
 @since 2.8
 */
inline ComFasterxmlJacksonAnnotationJsonFormat_Feature *ComFasterxmlJacksonAnnotationJsonFormat_Feature_get_ACCEPT_CASE_INSENSITIVE_PROPERTIES(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonFormat_Feature, ACCEPT_CASE_INSENSITIVE_PROPERTIES)

/*!
 @brief Override for <code>SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS</code>,
  similar constraints apply.
 */
inline ComFasterxmlJacksonAnnotationJsonFormat_Feature *ComFasterxmlJacksonAnnotationJsonFormat_Feature_get_WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonFormat_Feature, WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS)

/*!
 @brief Override for <code>SerializationFeature.WRITE_DATES_WITH_ZONE_ID</code>,
  similar constraints apply.
 */
inline ComFasterxmlJacksonAnnotationJsonFormat_Feature *ComFasterxmlJacksonAnnotationJsonFormat_Feature_get_WRITE_DATES_WITH_ZONE_ID(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonFormat_Feature, WRITE_DATES_WITH_ZONE_ID)

/*!
 @brief Override for <code>SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED</code>
  which will force serialization of single-element arrays and <code>java.util.Collection</code>s
  as that single element and excluding array wrapper.
 */
inline ComFasterxmlJacksonAnnotationJsonFormat_Feature *ComFasterxmlJacksonAnnotationJsonFormat_Feature_get_WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonFormat_Feature, WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)

/*!
 @brief Override for <code>SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS</code>,
  enabling of which will force sorting of <code>java.util.Map</code> keys before
  serialization.
 */
inline ComFasterxmlJacksonAnnotationJsonFormat_Feature *ComFasterxmlJacksonAnnotationJsonFormat_Feature_get_WRITE_SORTED_MAP_ENTRIES(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonFormat_Feature, WRITE_SORTED_MAP_ENTRIES)

/*!
 @brief Override for <code>DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIMEZONE</code>
  that specifies whether context provided timezone 
 <code>DeserializationContext.getTimeZone()</code> should be used to adjust Date/Time
  values on deserialization, even if value itself contains timezone informatio
 <p>
  NOTE: due to limitations of "old" JDK date/time types (that is, 
 <code>java.util.Date</code> and <code>java.util.Calendar</code>), this setting is only
  applicable to <code>Joda</code> and <code>Java 8 date/time</code> values,
  but not to <code>java.util.Date</code> or <code>java.util.Calendar</code>.
 @since 2.8
 */
inline ComFasterxmlJacksonAnnotationJsonFormat_Feature *ComFasterxmlJacksonAnnotationJsonFormat_Feature_get_ADJUST_DATES_TO_CONTEXT_TIME_ZONE(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonFormat_Feature, ADJUST_DATES_TO_CONTEXT_TIME_ZONE)

FOUNDATION_EXPORT IOSObjectArray *ComFasterxmlJacksonAnnotationJsonFormat_Feature_values(void);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Feature *ComFasterxmlJacksonAnnotationJsonFormat_Feature_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Feature *ComFasterxmlJacksonAnnotationJsonFormat_Feature_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonAnnotationJsonFormat_Feature)

#endif

#if !defined (ComFasterxmlJacksonAnnotationJsonFormat_Features_) && (INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonFormat || defined(INCLUDE_ComFasterxmlJacksonAnnotationJsonFormat_Features))
#define ComFasterxmlJacksonAnnotationJsonFormat_Features_

@class ComFasterxmlJacksonAnnotationJsonFormat_Feature;
@class IOSObjectArray;
@class JavaLangBoolean;
@protocol ComFasterxmlJacksonAnnotationJsonFormat;

/*!
 @brief Helper class that encapsulates information equivalent to <code>java.lang.Boolean</code>
  valued <code>java.util.EnumMap</code>.
 @since 2.6
 */
@interface ComFasterxmlJacksonAnnotationJsonFormat_Features : NSObject

#pragma mark Public

+ (ComFasterxmlJacksonAnnotationJsonFormat_Features *)constructWithComFasterxmlJacksonAnnotationJsonFormat_FeatureArray:(IOSObjectArray *)enabled
                                                               withComFasterxmlJacksonAnnotationJsonFormat_FeatureArray:(IOSObjectArray *)disabled;

+ (ComFasterxmlJacksonAnnotationJsonFormat_Features *)constructWithComFasterxmlJacksonAnnotationJsonFormat:(id<ComFasterxmlJacksonAnnotationJsonFormat>)f;

+ (ComFasterxmlJacksonAnnotationJsonFormat_Features *)empty;

- (jboolean)isEqual:(id)o;

- (JavaLangBoolean *)getWithComFasterxmlJacksonAnnotationJsonFormat_Feature:(ComFasterxmlJacksonAnnotationJsonFormat_Feature *)f;

- (NSUInteger)hash;

- (ComFasterxmlJacksonAnnotationJsonFormat_Features *)withWithComFasterxmlJacksonAnnotationJsonFormat_FeatureArray:(IOSObjectArray *)features;

- (ComFasterxmlJacksonAnnotationJsonFormat_Features *)withoutWithComFasterxmlJacksonAnnotationJsonFormat_FeatureArray:(IOSObjectArray *)features;

- (ComFasterxmlJacksonAnnotationJsonFormat_Features *)withOverridesWithComFasterxmlJacksonAnnotationJsonFormat_Features:(ComFasterxmlJacksonAnnotationJsonFormat_Features *)overrides;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonAnnotationJsonFormat_Features)

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Features *ComFasterxmlJacksonAnnotationJsonFormat_Features_empty(void);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Features *ComFasterxmlJacksonAnnotationJsonFormat_Features_constructWithComFasterxmlJacksonAnnotationJsonFormat_(id<ComFasterxmlJacksonAnnotationJsonFormat> f);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Features *ComFasterxmlJacksonAnnotationJsonFormat_Features_constructWithComFasterxmlJacksonAnnotationJsonFormat_FeatureArray_withComFasterxmlJacksonAnnotationJsonFormat_FeatureArray_(IOSObjectArray *enabled, IOSObjectArray *disabled);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonAnnotationJsonFormat_Features)

#endif

#if !defined (ComFasterxmlJacksonAnnotationJsonFormat_Value_) && (INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonFormat || defined(INCLUDE_ComFasterxmlJacksonAnnotationJsonFormat_Value))
#define ComFasterxmlJacksonAnnotationJsonFormat_Value_

#define RESTRICT_ComFasterxmlJacksonAnnotationJacksonAnnotationValue 1
#define INCLUDE_ComFasterxmlJacksonAnnotationJacksonAnnotationValue 1
#include "com/fasterxml/jackson/annotation/JacksonAnnotationValue.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonAnnotationJsonFormat_Feature;
@class ComFasterxmlJacksonAnnotationJsonFormat_Features;
@class ComFasterxmlJacksonAnnotationJsonFormat_Shape;
@class IOSClass;
@class IOSObjectArray;
@class JavaLangBoolean;
@class JavaUtilLocale;
@class JavaUtilTimeZone;
@protocol ComFasterxmlJacksonAnnotationJsonFormat;

/*!
 @brief Helper class used to contain information from a single <code>JsonFormat</code>
  annotation.
 */
@interface ComFasterxmlJacksonAnnotationJsonFormat_Value : NSObject < ComFasterxmlJacksonAnnotationJacksonAnnotationValue, JavaIoSerializable >

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithComFasterxmlJacksonAnnotationJsonFormat:(id<ComFasterxmlJacksonAnnotationJsonFormat>)ann;

- (instancetype __nonnull)initWithNSString:(NSString *)p
withComFasterxmlJacksonAnnotationJsonFormat_Shape:(ComFasterxmlJacksonAnnotationJsonFormat_Shape *)sh
                        withJavaUtilLocale:(JavaUtilLocale *)l
                              withNSString:(NSString *)tzStr
                      withJavaUtilTimeZone:(JavaUtilTimeZone *)tz
withComFasterxmlJacksonAnnotationJsonFormat_Features:(ComFasterxmlJacksonAnnotationJsonFormat_Features *)f;

/*!
 @since 2.9
 */
- (instancetype __nonnull)initWithNSString:(NSString *)p
withComFasterxmlJacksonAnnotationJsonFormat_Shape:(ComFasterxmlJacksonAnnotationJsonFormat_Shape *)sh
                        withJavaUtilLocale:(JavaUtilLocale *)l
                              withNSString:(NSString *)tzStr
                      withJavaUtilTimeZone:(JavaUtilTimeZone *)tz
withComFasterxmlJacksonAnnotationJsonFormat_Features:(ComFasterxmlJacksonAnnotationJsonFormat_Features *)f
                       withJavaLangBoolean:(JavaLangBoolean *)lenient;

- (instancetype __nonnull)initWithNSString:(NSString *)p
withComFasterxmlJacksonAnnotationJsonFormat_Shape:(ComFasterxmlJacksonAnnotationJsonFormat_Shape *)sh
                        withJavaUtilLocale:(JavaUtilLocale *)l
                      withJavaUtilTimeZone:(JavaUtilTimeZone *)tz
withComFasterxmlJacksonAnnotationJsonFormat_Features:(ComFasterxmlJacksonAnnotationJsonFormat_Features *)f;

/*!
 @since 2.9
 */
- (instancetype __nonnull)initWithNSString:(NSString *)p
withComFasterxmlJacksonAnnotationJsonFormat_Shape:(ComFasterxmlJacksonAnnotationJsonFormat_Shape *)sh
                        withJavaUtilLocale:(JavaUtilLocale *)l
                      withJavaUtilTimeZone:(JavaUtilTimeZone *)tz
withComFasterxmlJacksonAnnotationJsonFormat_Features:(ComFasterxmlJacksonAnnotationJsonFormat_Features *)f
                       withJavaLangBoolean:(JavaLangBoolean *)lenient;

- (instancetype __nonnull)initWithNSString:(NSString *)p
withComFasterxmlJacksonAnnotationJsonFormat_Shape:(ComFasterxmlJacksonAnnotationJsonFormat_Shape *)sh
                              withNSString:(NSString *)localeStr
                              withNSString:(NSString *)tzStr
withComFasterxmlJacksonAnnotationJsonFormat_Features:(ComFasterxmlJacksonAnnotationJsonFormat_Features *)f;

/*!
 @since 2.9
 */
- (instancetype __nonnull)initWithNSString:(NSString *)p
withComFasterxmlJacksonAnnotationJsonFormat_Shape:(ComFasterxmlJacksonAnnotationJsonFormat_Shape *)sh
                              withNSString:(NSString *)localeStr
                              withNSString:(NSString *)tzStr
withComFasterxmlJacksonAnnotationJsonFormat_Features:(ComFasterxmlJacksonAnnotationJsonFormat_Features *)f
                       withJavaLangBoolean:(JavaLangBoolean *)lenient;

/*!
 @since 2.7
 */
+ (ComFasterxmlJacksonAnnotationJsonFormat_Value *)empty;

- (jboolean)isEqual:(id)o;

/*!
 @since 2.9
 */
+ (ComFasterxmlJacksonAnnotationJsonFormat_Value *)forLeniencyWithBoolean:(jboolean)lenient;

/*!
 @since 2.6
 */
+ (ComFasterxmlJacksonAnnotationJsonFormat_Value *)forPatternWithNSString:(NSString *)p;

/*!
 @since 2.7
 */
+ (ComFasterxmlJacksonAnnotationJsonFormat_Value *)forShapeWithComFasterxmlJacksonAnnotationJsonFormat_Shape:(ComFasterxmlJacksonAnnotationJsonFormat_Shape *)sh;

/*!
 @since 2.7
 */
+ (ComFasterxmlJacksonAnnotationJsonFormat_Value *)fromWithComFasterxmlJacksonAnnotationJsonFormat:(id<ComFasterxmlJacksonAnnotationJsonFormat>)ann;

/*!
 @brief Accessor for checking whether this format value has specific setting for
  given feature.Result is 3-valued with either `null`, <code>Boolean.TRUE</code> or 
 <code>Boolean.FALSE</code>, indicating 'yes/no/dunno' choices, where `null` ("dunno")
  indicates that the default handling should be used based on global defaults,
  and there is no format override.
 @since 2.6
 */
- (JavaLangBoolean *)getFeatureWithComFasterxmlJacksonAnnotationJsonFormat_Feature:(ComFasterxmlJacksonAnnotationJsonFormat_Feature *)f;

/*!
 @brief Accessor for getting full set of features enabled/disabled.
 @since 2.8
 */
- (ComFasterxmlJacksonAnnotationJsonFormat_Features *)getFeatures;

/*!
 @since 2.9
 */
- (JavaLangBoolean *)getLenient;

- (JavaUtilLocale *)getLocale;

- (NSString *)getPattern;

- (ComFasterxmlJacksonAnnotationJsonFormat_Shape *)getShape;

- (JavaUtilTimeZone *)getTimeZone;

- (NSUInteger)hash;

/*!
 @brief Accessor for checking whether there is a setting for leniency.
 NOTE: does NOT mean that `lenient` is `true` necessarily; just that
  it has been set.
 @since 2.9
 */
- (jboolean)hasLenient;

/*!
 @since 2.4
 */
- (jboolean)hasLocale;

/*!
 @since 2.4
 */
- (jboolean)hasPattern;

/*!
 @since 2.4
 */
- (jboolean)hasShape;

/*!
 @since 2.4
 */
- (jboolean)hasTimeZone;

/*!
 @since 2.9
 */
- (jboolean)isLenient;

/*!
 @brief Helper method that will try to combine values from two <code>Value</code>
  instances, using one as base settings, and the other as overrides
  to use instead of base values when defined; base values are only
  use if override does not specify a value (matching value is null
  or logically missing).
 Note that one or both of value instances may be `null`, directly;
  if both are `null`, result will also be `null`; otherwise never null.
 @since 2.8
 */
+ (ComFasterxmlJacksonAnnotationJsonFormat_Value *)mergeWithComFasterxmlJacksonAnnotationJsonFormat_Value:(ComFasterxmlJacksonAnnotationJsonFormat_Value *)base
                                                        withComFasterxmlJacksonAnnotationJsonFormat_Value:(ComFasterxmlJacksonAnnotationJsonFormat_Value *)overrides;

/*!
 @since 2.8
 */
+ (ComFasterxmlJacksonAnnotationJsonFormat_Value *)mergeAllWithComFasterxmlJacksonAnnotationJsonFormat_ValueArray:(IOSObjectArray *)values;

/*!
 @brief Alternate access (compared to <code>getTimeZone()</code>) which is useful
  when caller just wants time zone id to convert, but not as JDK
  provided <code>TimeZone</code>
 @since 2.4
 */
- (NSString *)timeZoneAsString;

- (NSString *)description;

- (IOSClass *)valueFor;

/*!
 @since 2.6
 */
- (ComFasterxmlJacksonAnnotationJsonFormat_Value *)withFeatureWithComFasterxmlJacksonAnnotationJsonFormat_Feature:(ComFasterxmlJacksonAnnotationJsonFormat_Feature *)f;

/*!
 @since 2.9
 */
- (ComFasterxmlJacksonAnnotationJsonFormat_Value *)withLenientWithJavaLangBoolean:(JavaLangBoolean *)lenient;

/*!
 @since 2.1
 */
- (ComFasterxmlJacksonAnnotationJsonFormat_Value *)withLocaleWithJavaUtilLocale:(JavaUtilLocale *)l;

/*!
 @since 2.6
 */
- (ComFasterxmlJacksonAnnotationJsonFormat_Value *)withoutFeatureWithComFasterxmlJacksonAnnotationJsonFormat_Feature:(ComFasterxmlJacksonAnnotationJsonFormat_Feature *)f;

/*!
 @since 2.7
 */
- (ComFasterxmlJacksonAnnotationJsonFormat_Value *)withOverridesWithComFasterxmlJacksonAnnotationJsonFormat_Value:(ComFasterxmlJacksonAnnotationJsonFormat_Value *)overrides;

/*!
 @since 2.1
 */
- (ComFasterxmlJacksonAnnotationJsonFormat_Value *)withPatternWithNSString:(NSString *)p;

/*!
 @since 2.1
 */
- (ComFasterxmlJacksonAnnotationJsonFormat_Value *)withShapeWithComFasterxmlJacksonAnnotationJsonFormat_Shape:(ComFasterxmlJacksonAnnotationJsonFormat_Shape *)s;

/*!
 @since 2.1
 */
- (ComFasterxmlJacksonAnnotationJsonFormat_Value *)withTimeZoneWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonAnnotationJsonFormat_Value)

FOUNDATION_EXPORT void ComFasterxmlJacksonAnnotationJsonFormat_Value_init(ComFasterxmlJacksonAnnotationJsonFormat_Value *self);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Value *new_ComFasterxmlJacksonAnnotationJsonFormat_Value_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Value *create_ComFasterxmlJacksonAnnotationJsonFormat_Value_init(void);

FOUNDATION_EXPORT void ComFasterxmlJacksonAnnotationJsonFormat_Value_initWithComFasterxmlJacksonAnnotationJsonFormat_(ComFasterxmlJacksonAnnotationJsonFormat_Value *self, id<ComFasterxmlJacksonAnnotationJsonFormat> ann);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Value *new_ComFasterxmlJacksonAnnotationJsonFormat_Value_initWithComFasterxmlJacksonAnnotationJsonFormat_(id<ComFasterxmlJacksonAnnotationJsonFormat> ann) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Value *create_ComFasterxmlJacksonAnnotationJsonFormat_Value_initWithComFasterxmlJacksonAnnotationJsonFormat_(id<ComFasterxmlJacksonAnnotationJsonFormat> ann);

FOUNDATION_EXPORT void ComFasterxmlJacksonAnnotationJsonFormat_Value_initWithNSString_withComFasterxmlJacksonAnnotationJsonFormat_Shape_withNSString_withNSString_withComFasterxmlJacksonAnnotationJsonFormat_Features_withJavaLangBoolean_(ComFasterxmlJacksonAnnotationJsonFormat_Value *self, NSString *p, ComFasterxmlJacksonAnnotationJsonFormat_Shape *sh, NSString *localeStr, NSString *tzStr, ComFasterxmlJacksonAnnotationJsonFormat_Features *f, JavaLangBoolean *lenient);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Value *new_ComFasterxmlJacksonAnnotationJsonFormat_Value_initWithNSString_withComFasterxmlJacksonAnnotationJsonFormat_Shape_withNSString_withNSString_withComFasterxmlJacksonAnnotationJsonFormat_Features_withJavaLangBoolean_(NSString *p, ComFasterxmlJacksonAnnotationJsonFormat_Shape *sh, NSString *localeStr, NSString *tzStr, ComFasterxmlJacksonAnnotationJsonFormat_Features *f, JavaLangBoolean *lenient) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Value *create_ComFasterxmlJacksonAnnotationJsonFormat_Value_initWithNSString_withComFasterxmlJacksonAnnotationJsonFormat_Shape_withNSString_withNSString_withComFasterxmlJacksonAnnotationJsonFormat_Features_withJavaLangBoolean_(NSString *p, ComFasterxmlJacksonAnnotationJsonFormat_Shape *sh, NSString *localeStr, NSString *tzStr, ComFasterxmlJacksonAnnotationJsonFormat_Features *f, JavaLangBoolean *lenient);

FOUNDATION_EXPORT void ComFasterxmlJacksonAnnotationJsonFormat_Value_initWithNSString_withComFasterxmlJacksonAnnotationJsonFormat_Shape_withJavaUtilLocale_withJavaUtilTimeZone_withComFasterxmlJacksonAnnotationJsonFormat_Features_withJavaLangBoolean_(ComFasterxmlJacksonAnnotationJsonFormat_Value *self, NSString *p, ComFasterxmlJacksonAnnotationJsonFormat_Shape *sh, JavaUtilLocale *l, JavaUtilTimeZone *tz, ComFasterxmlJacksonAnnotationJsonFormat_Features *f, JavaLangBoolean *lenient);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Value *new_ComFasterxmlJacksonAnnotationJsonFormat_Value_initWithNSString_withComFasterxmlJacksonAnnotationJsonFormat_Shape_withJavaUtilLocale_withJavaUtilTimeZone_withComFasterxmlJacksonAnnotationJsonFormat_Features_withJavaLangBoolean_(NSString *p, ComFasterxmlJacksonAnnotationJsonFormat_Shape *sh, JavaUtilLocale *l, JavaUtilTimeZone *tz, ComFasterxmlJacksonAnnotationJsonFormat_Features *f, JavaLangBoolean *lenient) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Value *create_ComFasterxmlJacksonAnnotationJsonFormat_Value_initWithNSString_withComFasterxmlJacksonAnnotationJsonFormat_Shape_withJavaUtilLocale_withJavaUtilTimeZone_withComFasterxmlJacksonAnnotationJsonFormat_Features_withJavaLangBoolean_(NSString *p, ComFasterxmlJacksonAnnotationJsonFormat_Shape *sh, JavaUtilLocale *l, JavaUtilTimeZone *tz, ComFasterxmlJacksonAnnotationJsonFormat_Features *f, JavaLangBoolean *lenient);

FOUNDATION_EXPORT void ComFasterxmlJacksonAnnotationJsonFormat_Value_initWithNSString_withComFasterxmlJacksonAnnotationJsonFormat_Shape_withJavaUtilLocale_withNSString_withJavaUtilTimeZone_withComFasterxmlJacksonAnnotationJsonFormat_Features_withJavaLangBoolean_(ComFasterxmlJacksonAnnotationJsonFormat_Value *self, NSString *p, ComFasterxmlJacksonAnnotationJsonFormat_Shape *sh, JavaUtilLocale *l, NSString *tzStr, JavaUtilTimeZone *tz, ComFasterxmlJacksonAnnotationJsonFormat_Features *f, JavaLangBoolean *lenient);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Value *new_ComFasterxmlJacksonAnnotationJsonFormat_Value_initWithNSString_withComFasterxmlJacksonAnnotationJsonFormat_Shape_withJavaUtilLocale_withNSString_withJavaUtilTimeZone_withComFasterxmlJacksonAnnotationJsonFormat_Features_withJavaLangBoolean_(NSString *p, ComFasterxmlJacksonAnnotationJsonFormat_Shape *sh, JavaUtilLocale *l, NSString *tzStr, JavaUtilTimeZone *tz, ComFasterxmlJacksonAnnotationJsonFormat_Features *f, JavaLangBoolean *lenient) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Value *create_ComFasterxmlJacksonAnnotationJsonFormat_Value_initWithNSString_withComFasterxmlJacksonAnnotationJsonFormat_Shape_withJavaUtilLocale_withNSString_withJavaUtilTimeZone_withComFasterxmlJacksonAnnotationJsonFormat_Features_withJavaLangBoolean_(NSString *p, ComFasterxmlJacksonAnnotationJsonFormat_Shape *sh, JavaUtilLocale *l, NSString *tzStr, JavaUtilTimeZone *tz, ComFasterxmlJacksonAnnotationJsonFormat_Features *f, JavaLangBoolean *lenient);

FOUNDATION_EXPORT void ComFasterxmlJacksonAnnotationJsonFormat_Value_initWithNSString_withComFasterxmlJacksonAnnotationJsonFormat_Shape_withJavaUtilLocale_withNSString_withJavaUtilTimeZone_withComFasterxmlJacksonAnnotationJsonFormat_Features_(ComFasterxmlJacksonAnnotationJsonFormat_Value *self, NSString *p, ComFasterxmlJacksonAnnotationJsonFormat_Shape *sh, JavaUtilLocale *l, NSString *tzStr, JavaUtilTimeZone *tz, ComFasterxmlJacksonAnnotationJsonFormat_Features *f);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Value *new_ComFasterxmlJacksonAnnotationJsonFormat_Value_initWithNSString_withComFasterxmlJacksonAnnotationJsonFormat_Shape_withJavaUtilLocale_withNSString_withJavaUtilTimeZone_withComFasterxmlJacksonAnnotationJsonFormat_Features_(NSString *p, ComFasterxmlJacksonAnnotationJsonFormat_Shape *sh, JavaUtilLocale *l, NSString *tzStr, JavaUtilTimeZone *tz, ComFasterxmlJacksonAnnotationJsonFormat_Features *f) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Value *create_ComFasterxmlJacksonAnnotationJsonFormat_Value_initWithNSString_withComFasterxmlJacksonAnnotationJsonFormat_Shape_withJavaUtilLocale_withNSString_withJavaUtilTimeZone_withComFasterxmlJacksonAnnotationJsonFormat_Features_(NSString *p, ComFasterxmlJacksonAnnotationJsonFormat_Shape *sh, JavaUtilLocale *l, NSString *tzStr, JavaUtilTimeZone *tz, ComFasterxmlJacksonAnnotationJsonFormat_Features *f);

FOUNDATION_EXPORT void ComFasterxmlJacksonAnnotationJsonFormat_Value_initWithNSString_withComFasterxmlJacksonAnnotationJsonFormat_Shape_withNSString_withNSString_withComFasterxmlJacksonAnnotationJsonFormat_Features_(ComFasterxmlJacksonAnnotationJsonFormat_Value *self, NSString *p, ComFasterxmlJacksonAnnotationJsonFormat_Shape *sh, NSString *localeStr, NSString *tzStr, ComFasterxmlJacksonAnnotationJsonFormat_Features *f);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Value *new_ComFasterxmlJacksonAnnotationJsonFormat_Value_initWithNSString_withComFasterxmlJacksonAnnotationJsonFormat_Shape_withNSString_withNSString_withComFasterxmlJacksonAnnotationJsonFormat_Features_(NSString *p, ComFasterxmlJacksonAnnotationJsonFormat_Shape *sh, NSString *localeStr, NSString *tzStr, ComFasterxmlJacksonAnnotationJsonFormat_Features *f) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Value *create_ComFasterxmlJacksonAnnotationJsonFormat_Value_initWithNSString_withComFasterxmlJacksonAnnotationJsonFormat_Shape_withNSString_withNSString_withComFasterxmlJacksonAnnotationJsonFormat_Features_(NSString *p, ComFasterxmlJacksonAnnotationJsonFormat_Shape *sh, NSString *localeStr, NSString *tzStr, ComFasterxmlJacksonAnnotationJsonFormat_Features *f);

FOUNDATION_EXPORT void ComFasterxmlJacksonAnnotationJsonFormat_Value_initWithNSString_withComFasterxmlJacksonAnnotationJsonFormat_Shape_withJavaUtilLocale_withJavaUtilTimeZone_withComFasterxmlJacksonAnnotationJsonFormat_Features_(ComFasterxmlJacksonAnnotationJsonFormat_Value *self, NSString *p, ComFasterxmlJacksonAnnotationJsonFormat_Shape *sh, JavaUtilLocale *l, JavaUtilTimeZone *tz, ComFasterxmlJacksonAnnotationJsonFormat_Features *f);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Value *new_ComFasterxmlJacksonAnnotationJsonFormat_Value_initWithNSString_withComFasterxmlJacksonAnnotationJsonFormat_Shape_withJavaUtilLocale_withJavaUtilTimeZone_withComFasterxmlJacksonAnnotationJsonFormat_Features_(NSString *p, ComFasterxmlJacksonAnnotationJsonFormat_Shape *sh, JavaUtilLocale *l, JavaUtilTimeZone *tz, ComFasterxmlJacksonAnnotationJsonFormat_Features *f) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Value *create_ComFasterxmlJacksonAnnotationJsonFormat_Value_initWithNSString_withComFasterxmlJacksonAnnotationJsonFormat_Shape_withJavaUtilLocale_withJavaUtilTimeZone_withComFasterxmlJacksonAnnotationJsonFormat_Features_(NSString *p, ComFasterxmlJacksonAnnotationJsonFormat_Shape *sh, JavaUtilLocale *l, JavaUtilTimeZone *tz, ComFasterxmlJacksonAnnotationJsonFormat_Features *f);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Value *ComFasterxmlJacksonAnnotationJsonFormat_Value_empty(void);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Value *ComFasterxmlJacksonAnnotationJsonFormat_Value_mergeWithComFasterxmlJacksonAnnotationJsonFormat_Value_withComFasterxmlJacksonAnnotationJsonFormat_Value_(ComFasterxmlJacksonAnnotationJsonFormat_Value *base, ComFasterxmlJacksonAnnotationJsonFormat_Value *overrides);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Value *ComFasterxmlJacksonAnnotationJsonFormat_Value_mergeAllWithComFasterxmlJacksonAnnotationJsonFormat_ValueArray_(IOSObjectArray *values);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Value *ComFasterxmlJacksonAnnotationJsonFormat_Value_fromWithComFasterxmlJacksonAnnotationJsonFormat_(id<ComFasterxmlJacksonAnnotationJsonFormat> ann);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Value *ComFasterxmlJacksonAnnotationJsonFormat_Value_forPatternWithNSString_(NSString *p);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Value *ComFasterxmlJacksonAnnotationJsonFormat_Value_forShapeWithComFasterxmlJacksonAnnotationJsonFormat_Shape_(ComFasterxmlJacksonAnnotationJsonFormat_Shape *sh);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonFormat_Value *ComFasterxmlJacksonAnnotationJsonFormat_Value_forLeniencyWithBoolean_(jboolean lenient);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonAnnotationJsonFormat_Value)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonFormat")
