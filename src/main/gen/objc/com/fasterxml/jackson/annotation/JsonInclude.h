//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/jackson-annotations/src/main/java/com/fasterxml/jackson/annotation/JsonInclude.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonInclude")
#ifdef RESTRICT_ComFasterxmlJacksonAnnotationJsonInclude
#define INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonInclude 0
#else
#define INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonInclude 1
#endif
#undef RESTRICT_ComFasterxmlJacksonAnnotationJsonInclude

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComFasterxmlJacksonAnnotationJsonInclude_) && (INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonInclude || defined(INCLUDE_ComFasterxmlJacksonAnnotationJsonInclude))
#define ComFasterxmlJacksonAnnotationJsonInclude_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class ComFasterxmlJacksonAnnotationJsonInclude_Include;
@class IOSClass;

/*!
 @brief Annotation used to indicate when value of the annotated property (when
  used for a field, method or constructor parameter), or all 
  properties of the annotated class, is to be serialized.
 Without annotation property values are always included, but by using
  this annotation one can specify simple exclusion rules to reduce
  amount of properties to write out.
 <p>
  Note that the main inclusion criteria (one annotated with <code>value</code>)
  is checked on <b>Java object level</b>, for the annotated type,
  and <b>NOT</b> on JSON output -- so even with <code>Include.NON_NULL</code>
  it is possible that JSON null values are output, if object reference
  in question is not `null`. An example is <code>java.util.concurrent.atomic.AtomicReference</code>
  instance constructed to reference <code>null</code> value: such a value
  would be serialized as JSON null, and not filtered out.
 <p>
  To base inclusion on value of contained value(s), you will typically also need
  to specify <code>content()</code> annotation; for example, specifying only 
 <code>value</code> as <code>Include.NON_EMPTY</code> for a {link java.util.Map} would
  exclude <code>Map</code>s with no values, but would include <code>Map</code>s
  with `null` values. To exclude Map with only `null` value, you would use both
  annotations like so:
 @code

 public class Bean {
    @@JsonInclude(value=Include.NON_EMPTY, content=Include.NON_NULL)
    public Map&lt;String,String&gt; entries;
 }
 
@endcode
  Similarly you could Maps that only contain
  "empty" elements, or "non-default" values (see <code>Include.NON_EMPTY</code> and 
 <code>Include.NON_DEFAULT</code> for more details).
 <p>
  In addition to `Map`s, `content` concept is also supported for referential
  types (like <code>java.util.concurrent.atomic.AtomicReference</code>).
  Note that `content` is NOT currently (as of Jackson 2.9) supported for
  arrays or <code>java.util.Collection</code>s, but supported may be added in
  future versions.
 @since 2.0
 */
@protocol ComFasterxmlJacksonAnnotationJsonInclude < JavaLangAnnotationAnnotation >

@property (readonly) ComFasterxmlJacksonAnnotationJsonInclude_Include *value;
@property (readonly) ComFasterxmlJacksonAnnotationJsonInclude_Include *content;
@property (readonly) IOSClass *valueFilter;
@property (readonly) IOSClass *contentFilter;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface ComFasterxmlJacksonAnnotationJsonInclude : NSObject < ComFasterxmlJacksonAnnotationJsonInclude > {
 @public
  ComFasterxmlJacksonAnnotationJsonInclude_Include *value_;
  ComFasterxmlJacksonAnnotationJsonInclude_Include *content_;
  IOSClass *valueFilter_;
  IOSClass *contentFilter_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(ComFasterxmlJacksonAnnotationJsonInclude)

FOUNDATION_EXPORT id<ComFasterxmlJacksonAnnotationJsonInclude> create_ComFasterxmlJacksonAnnotationJsonInclude(ComFasterxmlJacksonAnnotationJsonInclude_Include *content, IOSClass *contentFilter, ComFasterxmlJacksonAnnotationJsonInclude_Include *value, IOSClass *valueFilter);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonAnnotationJsonInclude)

#endif

#if !defined (ComFasterxmlJacksonAnnotationJsonInclude_Include_) && (INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonInclude || defined(INCLUDE_ComFasterxmlJacksonAnnotationJsonInclude_Include))
#define ComFasterxmlJacksonAnnotationJsonInclude_Include_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, ComFasterxmlJacksonAnnotationJsonInclude_Include_Enum) {
  ComFasterxmlJacksonAnnotationJsonInclude_Include_Enum_ALWAYS = 0,
  ComFasterxmlJacksonAnnotationJsonInclude_Include_Enum_NON_NULL = 1,
  ComFasterxmlJacksonAnnotationJsonInclude_Include_Enum_NON_ABSENT = 2,
  ComFasterxmlJacksonAnnotationJsonInclude_Include_Enum_NON_EMPTY = 3,
  ComFasterxmlJacksonAnnotationJsonInclude_Include_Enum_NON_DEFAULT = 4,
  ComFasterxmlJacksonAnnotationJsonInclude_Include_Enum_CUSTOM = 5,
  ComFasterxmlJacksonAnnotationJsonInclude_Include_Enum_USE_DEFAULTS = 6,
};

/*!
 @brief Enumeration used with <code>JsonInclude</code>
  to define which properties
  of Java Beans are to be included in serialization.
 */
@interface ComFasterxmlJacksonAnnotationJsonInclude_Include : JavaLangEnum

#pragma mark Public

+ (ComFasterxmlJacksonAnnotationJsonInclude_Include *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonAnnotationJsonInclude_Include)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonInclude_Include *ComFasterxmlJacksonAnnotationJsonInclude_Include_values_[];

/*!
 @brief Value that indicates that property is to be always included,
  independent of value of the property.
 */
inline ComFasterxmlJacksonAnnotationJsonInclude_Include *ComFasterxmlJacksonAnnotationJsonInclude_Include_get_ALWAYS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonInclude_Include, ALWAYS)

/*!
 @brief Value that indicates that only properties with non-null
  values are to be included.
 */
inline ComFasterxmlJacksonAnnotationJsonInclude_Include *ComFasterxmlJacksonAnnotationJsonInclude_Include_get_NON_NULL(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonInclude_Include, NON_NULL)

/*!
 @brief Value that indicates that properties are included unless their value
  is:
 <ul>
   <li>null</li>
   <li>"absent" value of a referential type (like Java 8 `Optional`, or
      {link java.utl.concurrent.atomic.AtomicReference}); that is, something
      that would not deference to a non-null value.
 </ul>
  This option is mostly used to work with "Optional"s (Java 8, Guava).
 @since 2.6
 */
inline ComFasterxmlJacksonAnnotationJsonInclude_Include *ComFasterxmlJacksonAnnotationJsonInclude_Include_get_NON_ABSENT(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonInclude_Include, NON_ABSENT)

/*!
 @brief Value that indicates that only properties with null value,
  or what is considered empty, are not to be included.
 Definition of emptiness is data type specific; see below
  for details on actual handling.
 <p>
  Default emptiness for all types includes:
 <ul>
  <li><code>Null</code> values.</li>
  <li>"Absent" values (see <code>NON_ABSENT</code>)</li>
 </ul>
  so that as baseline, "empty" set includes values that would be
  excluded by both <code>NON_NULL</code> and <code>NON_ABSENT</code>.
 <br>
  Beyond this base, following types have additional empty values:
 <ul>
  <li>For <code>java.util.Collection</code>s and <code>java.util.Map</code>s,
     method <code>isEmpty()</code> is called;
    </li>
  <li>For Java arrays, empty arrays are ones with length of 0
    </li>
  <li>For Java <code>java.lang.String</code>s, <code>length()</code> is called,
    and return value of 0 indicates empty String   
 </li>
  </ul>
   and for other types, null values are excluded but other exclusions (if any).
 <p>
  Note that this default handling can be overridden by custom 
 <code>JsonSerializer</code> implementation: if method <code>isEmpty()</code>
  is overridden, it will be called to see if non-null values are
  considered empty (null is always considered empty).
 <p>
  Compatibility note: Jackson 2.6 included a wider range of "empty" values than
  either earlier (up to 2.5) or later (2.7 and beyond) types; specifically:
 <ul>
  <li>Default values of primitive types (like <code>0</code> for `int`/`java.lang.Integer`
   and `false` for `bool`/`Boolean`)  
 </li>
  <li>Timestamp 0 for date/time types
   </li>
 </ul>
  With 2.7, definition has been tightened back to only containing types explained
  above (null, absent, empty String, empty containers), and now
  extended definition may be specified using <code>NON_DEFAULT</code>.
 */
inline ComFasterxmlJacksonAnnotationJsonInclude_Include *ComFasterxmlJacksonAnnotationJsonInclude_Include_get_NON_EMPTY(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonInclude_Include, NON_EMPTY)

/*!
 @brief Meaning of this setting depends on context: whether annotation is
  specified for POJO type (class), or not.In latter case annotation
  is either used as the global default, or as property override.
 <p>
  When used for a POJO, definition is that only values that differ from
  the default values of POJO properties are included. This is done
  by creating an instance of POJO using zero-argument constructor,
  and accessing property values: value is used as the default value
  by using <code>equals()</code> method, except for the case where property
  has `null` value in which case straight null check is used.
 <p>
  When NOT used for a POJO (that is, as a global default, or as property
  override), definition is such that:
 <ul>
  <li>All values considered "empty" (as per <code>NON_EMPTY</code>) are excluded</li>
  <li>Primitive/wrapper default values are excluded</li>
  <li>Date/time values that have timestamp (`long` value of milliseconds since
    epoch, see <code>java.util.Date</code>) of `0L` are excluded</li>
  </ul>
 */
inline ComFasterxmlJacksonAnnotationJsonInclude_Include *ComFasterxmlJacksonAnnotationJsonInclude_Include_get_NON_DEFAULT(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonInclude_Include, NON_DEFAULT)

/*!
 @brief Value that indicates that separate `filter` Object (specified by 
 <code>JsonInclude.valueFilter</code> for value itself, and/or 
 <code>JsonInclude.contentFilter</code> for contents of structured types)
  is to be used for determining inclusion criteria.
 Filter object's <code>equals()</code> method is called with value
  to serialize; if it returns <code>true</code> value is <b>excluded</b>
  (that is, filtered out); if <code>false</code> value is <b>included</b>.
 @since 2.9
 */
inline ComFasterxmlJacksonAnnotationJsonInclude_Include *ComFasterxmlJacksonAnnotationJsonInclude_Include_get_CUSTOM(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonInclude_Include, CUSTOM)

/*!
 @brief Pseudo-value used to indicate that the higher-level defaults make
  sense, to avoid overriding inclusion value.For example, if returned
  for a property this would use defaults for the class that contains
  property, if any defined; and if none defined for that, then 
  global serialization inclusion details.
 @since 2.6
 */
inline ComFasterxmlJacksonAnnotationJsonInclude_Include *ComFasterxmlJacksonAnnotationJsonInclude_Include_get_USE_DEFAULTS(void);
J2OBJC_ENUM_CONSTANT(ComFasterxmlJacksonAnnotationJsonInclude_Include, USE_DEFAULTS)

FOUNDATION_EXPORT IOSObjectArray *ComFasterxmlJacksonAnnotationJsonInclude_Include_values(void);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonInclude_Include *ComFasterxmlJacksonAnnotationJsonInclude_Include_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonInclude_Include *ComFasterxmlJacksonAnnotationJsonInclude_Include_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonAnnotationJsonInclude_Include)

#endif

#if !defined (ComFasterxmlJacksonAnnotationJsonInclude_Value_) && (INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonInclude || defined(INCLUDE_ComFasterxmlJacksonAnnotationJsonInclude_Value))
#define ComFasterxmlJacksonAnnotationJsonInclude_Value_

#define RESTRICT_ComFasterxmlJacksonAnnotationJacksonAnnotationValue 1
#define INCLUDE_ComFasterxmlJacksonAnnotationJacksonAnnotationValue 1
#include "com/fasterxml/jackson/annotation/JacksonAnnotationValue.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComFasterxmlJacksonAnnotationJsonInclude_Include;
@class IOSClass;
@class IOSObjectArray;
@protocol ComFasterxmlJacksonAnnotationJsonInclude;

/*!
 @brief Helper class used to contain information from a single <code>JsonInclude</code>
  annotation.
 @since 2.6
 */
@interface ComFasterxmlJacksonAnnotationJsonInclude_Value : NSObject < ComFasterxmlJacksonAnnotationJacksonAnnotationValue, JavaIoSerializable > {
 @public
  ComFasterxmlJacksonAnnotationJsonInclude_Include *_valueInclusion_;
  ComFasterxmlJacksonAnnotationJsonInclude_Include *_contentInclusion_;
  /*!
   @since 2.9
   */
  IOSClass *_valueFilter_;
  /*!
   @since 2.9
   */
  IOSClass *_contentFilter_;
}

#pragma mark Public

- (instancetype __nonnull)initWithComFasterxmlJacksonAnnotationJsonInclude:(id<ComFasterxmlJacksonAnnotationJsonInclude>)src;

/*!
 @brief Factory method to use for constructing an instance for components
 */
+ (ComFasterxmlJacksonAnnotationJsonInclude_Value *)constructWithComFasterxmlJacksonAnnotationJsonInclude_Include:(ComFasterxmlJacksonAnnotationJsonInclude_Include *)valueIncl
                                                             withComFasterxmlJacksonAnnotationJsonInclude_Include:(ComFasterxmlJacksonAnnotationJsonInclude_Include *)contentIncl;

/*!
 @brief Factory method to use for constructing an instance for components
 @since 2.9
 */
+ (ComFasterxmlJacksonAnnotationJsonInclude_Value *)constructWithComFasterxmlJacksonAnnotationJsonInclude_Include:(ComFasterxmlJacksonAnnotationJsonInclude_Include *)valueIncl
                                                             withComFasterxmlJacksonAnnotationJsonInclude_Include:(ComFasterxmlJacksonAnnotationJsonInclude_Include *)contentIncl
                                                                                                     withIOSClass:(IOSClass *)valueFilter
                                                                                                     withIOSClass:(IOSClass *)contentFilter;

+ (ComFasterxmlJacksonAnnotationJsonInclude_Value *)empty;

- (jboolean)isEqual:(id)o;

/*!
 @brief Factory method to use for constructing an instance from instance of 
 <code>JsonInclude</code>
 */
+ (ComFasterxmlJacksonAnnotationJsonInclude_Value *)fromWithComFasterxmlJacksonAnnotationJsonInclude:(id<ComFasterxmlJacksonAnnotationJsonInclude>)src;

- (IOSClass *)getContentFilter;

- (ComFasterxmlJacksonAnnotationJsonInclude_Include *)getContentInclusion;

- (IOSClass *)getValueFilter;

- (ComFasterxmlJacksonAnnotationJsonInclude_Include *)getValueInclusion;

- (NSUInteger)hash;

/*!
 @brief Helper method that will try to combine values from two <code>Value</code>
  instances, using one as base settings, and the other as overrides
  to use instead of base values when defined; base values are only
  use if override does not specify a value (matching value is null
  or logically missing).
 Note that one or both of value instances may be `null`, directly;
  if both are `null`, result will also be `null`; otherwise never null.
 @since 2.8
 */
+ (ComFasterxmlJacksonAnnotationJsonInclude_Value *)mergeWithComFasterxmlJacksonAnnotationJsonInclude_Value:(ComFasterxmlJacksonAnnotationJsonInclude_Value *)base
                                                         withComFasterxmlJacksonAnnotationJsonInclude_Value:(ComFasterxmlJacksonAnnotationJsonInclude_Value *)overrides;

/*!
 @since 2.8
 */
+ (ComFasterxmlJacksonAnnotationJsonInclude_Value *)mergeAllWithComFasterxmlJacksonAnnotationJsonInclude_ValueArray:(IOSObjectArray *)values;

- (NSString *)description;

- (IOSClass *)valueFor;

/*!
 @brief Mutant factory that will either
 <ul>
  <li>Set <code>content</code> as <code>USE_DEFAULTS</code>
  and <code>contentFilter</code> to <code>filter</code> (if filter not null);
  or</li>
  <li>Set <code>content</code> as <code>ALWAYS</code> (if filter null)
   </li>
   </ul>
 @since 2.9
 */
- (ComFasterxmlJacksonAnnotationJsonInclude_Value *)withContentFilterWithIOSClass:(IOSClass *)filter;

- (ComFasterxmlJacksonAnnotationJsonInclude_Value *)withContentInclusionWithComFasterxmlJacksonAnnotationJsonInclude_Include:(ComFasterxmlJacksonAnnotationJsonInclude_Include *)incl;

/*!
 @brief Mutant factory method that merges values of this value with given override
  values, so that any explicitly defined inclusion in overrides has precedence over
  settings of this value instance.If no overrides exist will return <code>this</code>
  instance; otherwise new <code>Value</code> with changed inclusion values.
 */
- (ComFasterxmlJacksonAnnotationJsonInclude_Value *)withOverridesWithComFasterxmlJacksonAnnotationJsonInclude_Value:(ComFasterxmlJacksonAnnotationJsonInclude_Value *)overrides;

/*!
 @brief Mutant factory that will either
 <ul>
  <li>Set <code>value</code> as <code>USE_DEFAULTS</code>
  and <code>valueFilter</code> to <code>filter</code> (if filter not null);
  or</li>
  <li>Set <code>value</code> as <code>ALWAYS</code> (if filter null)
   </li>
   </ul>
 @since 2.9
 */
- (ComFasterxmlJacksonAnnotationJsonInclude_Value *)withValueFilterWithIOSClass:(IOSClass *)filter;

- (ComFasterxmlJacksonAnnotationJsonInclude_Value *)withValueInclusionWithComFasterxmlJacksonAnnotationJsonInclude_Include:(ComFasterxmlJacksonAnnotationJsonInclude_Include *)incl;

#pragma mark Protected

- (instancetype __nonnull)initWithComFasterxmlJacksonAnnotationJsonInclude_Include:(ComFasterxmlJacksonAnnotationJsonInclude_Include *)vi
                              withComFasterxmlJacksonAnnotationJsonInclude_Include:(ComFasterxmlJacksonAnnotationJsonInclude_Include *)ci
                                                                      withIOSClass:(IOSClass *)valueFilter
                                                                      withIOSClass:(IOSClass *)contentFilter;

- (id)readResolve;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComFasterxmlJacksonAnnotationJsonInclude_Value)

J2OBJC_FIELD_SETTER(ComFasterxmlJacksonAnnotationJsonInclude_Value, _valueInclusion_, ComFasterxmlJacksonAnnotationJsonInclude_Include *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonAnnotationJsonInclude_Value, _contentInclusion_, ComFasterxmlJacksonAnnotationJsonInclude_Include *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonAnnotationJsonInclude_Value, _valueFilter_, IOSClass *)
J2OBJC_FIELD_SETTER(ComFasterxmlJacksonAnnotationJsonInclude_Value, _contentFilter_, IOSClass *)

inline ComFasterxmlJacksonAnnotationJsonInclude_Value *ComFasterxmlJacksonAnnotationJsonInclude_Value_get_EMPTY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonInclude_Value *ComFasterxmlJacksonAnnotationJsonInclude_Value_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComFasterxmlJacksonAnnotationJsonInclude_Value, EMPTY, ComFasterxmlJacksonAnnotationJsonInclude_Value *)

FOUNDATION_EXPORT void ComFasterxmlJacksonAnnotationJsonInclude_Value_initWithComFasterxmlJacksonAnnotationJsonInclude_(ComFasterxmlJacksonAnnotationJsonInclude_Value *self, id<ComFasterxmlJacksonAnnotationJsonInclude> src);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonInclude_Value *new_ComFasterxmlJacksonAnnotationJsonInclude_Value_initWithComFasterxmlJacksonAnnotationJsonInclude_(id<ComFasterxmlJacksonAnnotationJsonInclude> src) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonInclude_Value *create_ComFasterxmlJacksonAnnotationJsonInclude_Value_initWithComFasterxmlJacksonAnnotationJsonInclude_(id<ComFasterxmlJacksonAnnotationJsonInclude> src);

FOUNDATION_EXPORT void ComFasterxmlJacksonAnnotationJsonInclude_Value_initWithComFasterxmlJacksonAnnotationJsonInclude_Include_withComFasterxmlJacksonAnnotationJsonInclude_Include_withIOSClass_withIOSClass_(ComFasterxmlJacksonAnnotationJsonInclude_Value *self, ComFasterxmlJacksonAnnotationJsonInclude_Include *vi, ComFasterxmlJacksonAnnotationJsonInclude_Include *ci, IOSClass *valueFilter, IOSClass *contentFilter);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonInclude_Value *new_ComFasterxmlJacksonAnnotationJsonInclude_Value_initWithComFasterxmlJacksonAnnotationJsonInclude_Include_withComFasterxmlJacksonAnnotationJsonInclude_Include_withIOSClass_withIOSClass_(ComFasterxmlJacksonAnnotationJsonInclude_Include *vi, ComFasterxmlJacksonAnnotationJsonInclude_Include *ci, IOSClass *valueFilter, IOSClass *contentFilter) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonInclude_Value *create_ComFasterxmlJacksonAnnotationJsonInclude_Value_initWithComFasterxmlJacksonAnnotationJsonInclude_Include_withComFasterxmlJacksonAnnotationJsonInclude_Include_withIOSClass_withIOSClass_(ComFasterxmlJacksonAnnotationJsonInclude_Include *vi, ComFasterxmlJacksonAnnotationJsonInclude_Include *ci, IOSClass *valueFilter, IOSClass *contentFilter);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonInclude_Value *ComFasterxmlJacksonAnnotationJsonInclude_Value_empty(void);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonInclude_Value *ComFasterxmlJacksonAnnotationJsonInclude_Value_mergeWithComFasterxmlJacksonAnnotationJsonInclude_Value_withComFasterxmlJacksonAnnotationJsonInclude_Value_(ComFasterxmlJacksonAnnotationJsonInclude_Value *base, ComFasterxmlJacksonAnnotationJsonInclude_Value *overrides);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonInclude_Value *ComFasterxmlJacksonAnnotationJsonInclude_Value_mergeAllWithComFasterxmlJacksonAnnotationJsonInclude_ValueArray_(IOSObjectArray *values);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonInclude_Value *ComFasterxmlJacksonAnnotationJsonInclude_Value_constructWithComFasterxmlJacksonAnnotationJsonInclude_Include_withComFasterxmlJacksonAnnotationJsonInclude_Include_(ComFasterxmlJacksonAnnotationJsonInclude_Include *valueIncl, ComFasterxmlJacksonAnnotationJsonInclude_Include *contentIncl);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonInclude_Value *ComFasterxmlJacksonAnnotationJsonInclude_Value_constructWithComFasterxmlJacksonAnnotationJsonInclude_Include_withComFasterxmlJacksonAnnotationJsonInclude_Include_withIOSClass_withIOSClass_(ComFasterxmlJacksonAnnotationJsonInclude_Include *valueIncl, ComFasterxmlJacksonAnnotationJsonInclude_Include *contentIncl, IOSClass *valueFilter, IOSClass *contentFilter);

FOUNDATION_EXPORT ComFasterxmlJacksonAnnotationJsonInclude_Value *ComFasterxmlJacksonAnnotationJsonInclude_Value_fromWithComFasterxmlJacksonAnnotationJsonInclude_(id<ComFasterxmlJacksonAnnotationJsonInclude> src);

J2OBJC_TYPE_LITERAL_HEADER(ComFasterxmlJacksonAnnotationJsonInclude_Value)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComFasterxmlJacksonAnnotationJsonInclude")
